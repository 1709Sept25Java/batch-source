CREATE TABLE EMPLOYEE(
    EMPLOYEE_ID NUMBER NOT NULL, 
    EMP_FIRSTNAME VARCHAR2(20),
    EMP_LASTNAME VARCHAR2(20), 
    DEPARTMENT_ID NUMBER, 
    SALARY NUMBER, 
    EMP_EMAIL VARCHAR(40),
    CONSTRAINT PK_EMPLOYEE PRIMARY KEY (EMPLOYEE_ID)
);

CREATE TABLE DEPARTMENT(
    DEPARTMENT_ID NUMBER NOT NULL, 
    DEPARTMENT_NAME VARCHAR(40),
    CONSTRAINT PK_DEPARTMENT PRIMARY KEY (DEPARTMENT_ID)
);

ALTER TABLE EMPLOYEE ADD CONSTRAINT FK_EMPLOYEE_DEPARTMENT
FOREIGN KEY (DEPARTMENT_ID) REFERENCES DEPARTMENT(DEPARTMENT_ID);

--PRIMARY KEY SEQUENCES
CREATE SEQUENCE DPT_PK
START WITH 1
INCREMENT BY 1;


CREATE SEQUENCE EMP_PK
START WITH 1
INCREMENT BY 1;


--TRIGGERS
CREATE OR REPLACE TRIGGER INSERT_EMP
BEFORE INSERT ON EMPLOYEE
FOR EACH ROW
BEGIN
  SELECT EMP_PK.NEXTVAL INTO :NEW.EMPLOYEE_ID FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER INSERT_DPT
BEFORE INSERT ON DEPARTMENT
FOR EACH ROW
BEGIN
  SELECT DPT_PK.NEXTVAL INTO :NEW.DEPARTMENT_ID FROM DUAL;
END;
/

--Insert records into tables
INSERT INTO DEPARTMENT (DEPARTMENT_NAME) VALUES ('Finance');
INSERT INTO DEPARTMENT (DEPARTMENT_NAME) VALUES ('HR');
INSERT INTO DEPARTMENT (DEPARTMENT_NAME) VALUES ('IT');

INSERT INTO EMPLOYEE (EMP_FIRSTNAME, EMP_LASTNAME, DEPARTMENT_ID, SALARY, EMP_EMAIL) 
    VALUES ('Johnny', 'Mac', 2, 40000, 'jmac@gmail.com');
INSERT INTO EMPLOYEE (EMP_FIRSTNAME, EMP_LASTNAME, DEPARTMENT_ID, SALARY, EMP_EMAIL) 
    VALUES ('Kira', 'Rose', 1, 58000, 'krose@gmail.com');
INSERT INTO EMPLOYEE (EMP_FIRSTNAME, EMP_LASTNAME, DEPARTMENT_ID, SALARY, EMP_EMAIL) 
    VALUES ('Lloyd', 'Fedder', 2, 46000, 'lfedder@gmail.com');
INSERT INTO EMPLOYEE (EMP_FIRSTNAME, EMP_LASTNAME, DEPARTMENT_ID, SALARY, EMP_EMAIL) 
    VALUES ('Paula', 'King', 3, 42000, 'pking@gmail.com');
INSERT INTO EMPLOYEE (EMP_FIRSTNAME, EMP_LASTNAME, DEPARTMENT_ID, SALARY, EMP_EMAIL) 
    VALUES ('Philip', 'Lautenberg', 1, 50000, 'plautenberg@gmail.com');
INSERT INTO EMPLOYEE (EMP_FIRSTNAME, EMP_LASTNAME, DEPARTMENT_ID, SALARY, EMP_EMAIL) 
    VALUES ('Charles', 'Flynn', 3, 46000, 'cflynn@gmail.com');
    
--Stored Procedure giving a raise to each member of a department
CREATE OR REPLACE PROCEDURE SP_GIVE_RAISE(DPT_ID DEPARTMENT.DEPARTMENT_ID%TYPE)
IS
CURSOR C1 IS
    SELECT SALARY
    FROM EMPLOYEE
    WHERE DPT_ID = DEPARTMENT_ID;
CURSOR C2 IS
    SELECT DEPARTMENT_ID
    FROM DEPARTMENT
    WHERE DPT_ID = DEPARTMENT_ID;
DPT_EXISTS BOOLEAN;
ID_HOLD NUMBER;
BEGIN
    OPEN C2;
    FETCH C2 INTO ID_HOLD;
    IF ID_HOLD IS NULL THEN
        DPT_EXISTS := FALSE;
        DBMS_OUTPUT.PUT_LINE('FALSE');
    END IF;
    IF ID_HOLD IS NOT NULL THEN
        DPT_EXISTS := TRUE;
        UPDATE EMPLOYEE
        SET SALARY = SALARY*(1.1);
        DBMS_OUTPUT.PUT_LINE('TRUE');
    END IF;
END;
/

SET SERVEROUTPUT ON; 

BEGIN
    SP_GIVE_RAISE(1);
END;
/