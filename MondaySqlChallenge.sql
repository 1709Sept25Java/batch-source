

CREATE TABLE EMPLOYEE_DATA (
EMPLOYEE_ID NUMBER,
EMP_FIRSTNAME VARCHAR2(30),
EMP_LASTNAME VARCHAR2 (50),
DEOARTMENT_ID NUMBER,
SALARY NUMBER,
EMP_EMAIL VARCHAR2(100)
)
                        
CREATE TABLE DEPARTMENT_DATA(
DEPARTMENT_ID NUMBER,
DEPARTMENT_NAME VARCHAR2(40)
)

--Create a sequence and trigger to auto-generate primary key values for both tables. 
CREATE SEQUENCE SQ_EMPLOYEE_PK
START WITH 5
INCREMENT BY 2;

CREATE SEQUENCE SQ_DEPARTMENT_PK
START WITH 5
INCREMENT BY 2;

CREATE OR REPLACE TRIGGER TR_AUTOGEN_PKFOR_EMP
BEFORE INSERT ON EMPLOYEE_DATA
FOR EACH ROW
BEGIN
  SELECT SQ_EMPLOYEE_PK.NEXTVAL INTO :NEW.EMPLOYEE_ID FROM DUAL;
END;


CREATE OR REPLACE TRIGGER TR_AUTOGEN_PKFOR_DEP
BEFORE INSERT ON DEPARTMENT_DATA
FOR EACH ROW
BEGIN
  SELECT SQ_DEPARTMENT_PK.NEXTVAL INTO :NEW.DEPARTMENT_ID FROM DUAL;
END;

--Insert at least six employees and three departments.
INSERT INTO EMPLOYEE_DATA VALUES(1, 'JHON', 'SMITH', 11, 50000, 'SMITHJ@SQL.COM');
INSERT INTO EMPLOYEE_DATA VALUES(2, 'JASON', 'HUANG', 12, 60000, 'HUANGJ@SQL.COM');
INSERT INTO EMPLOYEE_DATA VALUES(3, 'RICK', 'GORDON', 13, 70000, 'GORDONR@SQL.COM');
INSERT INTO EMPLOYEE_DATA VALUES(4, 'TERRY', 'KIM', 13, 40000, 'KIMT@SQL.COM');
INSERT INTO EMPLOYEE_DATA VALUES(5, 'TINA', 'SHARMA', 15, 50000, 'SHARMAT@SQL.COM');
INSERT INTO EMPLOYEE_DATA VALUES(6, 'ALIA', 'PATEL', 15, 60000, 'PATELA@SQL.COM');

INSERT INTO DEPARTMENT_DATA VALUES ( 11, 'FINANCE');
INSERT INTO DEPARTMENT_DATA VALUES (15, 'IT MANAGEMENT');

--Create a stored procedure SP_GIVE_RAISE which takes in a DEPARTMENT_ID and increases each 
--employee's salary within the department by 10%, and returns the new average salary for the 
--department, as well as a boolean value indicating whether the ID entered corresponds to a valid
--department. 

CREATE OR REPLACE PROCEDURE SP_GIVE_RAISE
( DEPARTMENT_IN_ID IN NUMBER) AS
CURRENT_SALARY NUMBER;
RETURN_SALARY NUMBER;
NEW_AVG_SALARY NUMBER;
CURSOR EMPLOYEE_SALARY IS 
SELECT SALARY INTO CURRENT_SALARY FROM EMPLOYEE_DATA 
WHERE DEPARTMENT_ID = DEPARTMENT_IN_ID;
BEGIN

OPEN EMPLOYEE_SALARY;
FETCH EMPLOYEE_SALARY INTO CURRENT_SALARY;
WHILE EMPLOYEE_SALARY %FOUND 
LOOP
    
    RETURN_SALARY := CURRENT_SALARY + (10/100)*CURRENT_SALARY;
    NEW_AVG_SALARY := SUM(RETURN_SALARY)/COUNT(DEPARTMENT_ID);
    DBMS_OUTPUT.PUT_LINE('DEPARTMENT AVERAGE SALARY: '|| ''||NEW_AVG_SALARY);
 
   
END LOOP;
CLOSE EMPLOYEE_SALARY;
END;
/


