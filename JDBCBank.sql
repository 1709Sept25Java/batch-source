--JDBC BANK ASSIGNMENT 
DROP TABLE ADMIN_USER CASCADE CONSTRAINTS;
-- ADMIN OR SUPER_USER_TABLE
CREATE TABLE ADMIN_USER(
ADMIN_ID NUMBER PRIMARY KEY,
ADMIN_FIRSTNAME VARCHAR2(100), 
ADMIN_LASTNAME VARCHAR2(100),
JOB_POSSITION VARCHAR2(200)
);

-- CREATE CUSTOMER OR CLIENT TABLE 
CREATE TABLE CUSTOMER (
CUSTOMER_ID NUMBER PRIMARY KEY, 
CUSTOMER_FIRSTNAME VARCHAR2(100),
CUSTOMER_LASTNAME VARCHAR2(100), 
CUSTOMER_BIRTHDATE DATE,
CUSTOME_STREET_ADDRESS VARCHAR2(200), 
CUSTOMER_STATE VARCHAR2(50), 
CUSTOMER_COUNTRY VARCHAR2(40), 
CUSTOMER_POSTALCODE NUMBER, 
CUSTOMER_EMAIL VARCHAR2(100), 
CUSTOMER_PHONE NUMBER
);

-- INTERMEDIATE TABLE FOR ADMIN AND CUSTOMER 
DROP TABLE ADMIN_CUSTOMER_USER CASCADE CONSTRAINTS;
CREATE TABLE ADMIN_CUSTOMER_USER(
ADMIN_CUSTOMER_USER_ID NUMBER PRIMARY KEY,
USSERNAME VARCHAR2(50) UNIQUE,
USSER_PASSWORD VARCHAR2(100) UNIQUE,
ADMIN_ID NUMBER, 
CUSTOMER_ID NUMBER, 
FOREIGN KEY (ADMIN_ID) REFERENCES ADMIN_USER(ADMIN_ID),
FOREIGN KEY(CUSTOMER_ID) REFERENCES CUSTOMER(CUSTOMER_ID)
);
DROP TABLE BANK_ACCOUNT CASCADE CONSTRAINTS; 
-- CREATE BANK_ACCOUNT TABLE 
CREATE TABLE BANK_ACCOUNT(
BANK_ACCOUNT_ID NUMBER PRIMARY KEY, 
BANK_ACCOUNT_TYPE VARCHAR2(100),
BANK_ACCOUNT_NUMBER NUMBER,
BANK_ACCOUNT_SATUS VARCHAR2(40),
BALANCE NUMBER, 
CUSTOMER_ID NUMBER,
FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMER(CUSTOMER_ID)
);

-- CREATE TRANSACTION TABLE 
DROP TABLE TRANSACTIONS CASCADE CONSTRAINTS;
CREATE TABLE TRANSACTIONS(
TRANSACTION_ID NUMBER PRIMARY KEY,
TRANSACTION_TYPE VARCHAR2(100),
ACCOUNT_TYPE VARCHAR(100),
TRANSACTION_AMOUNT NUMBER,
BANK_ACCOUNT_ID NUMBER,
FOREIGN KEY(BANK_ACCOUNT_ID) REFERENCES BANK_ACCOUNT(BANK_ACCOUNT_ID)
);

-- CREATE SEQUENCE FOR ADMIN_CUSTOMER_USER
CREATE SEQUENCE SEQ_PRIMKEY_ADMIN_CU
START WITH 300
INCREMENT BY 3;

CREATE OR REPLACE TRIGGER TRIG_INSERT_AD_CU
BEFORE INSERT ON ADMIN_CUSTOMER_USER
FOR EACH ROW 
BEGIN
    SELECT SEQ_PRIMKEY_ADMIN_CU.NEXTVAL INTO :NEW.ADMIN_CUSTOMER_USER_ID FROM DUAL;
END;

-- CREATE SEQUENCE FOR ADMIN_USER
CREATE SEQUENCE SEQ_PRIMKEY_AM_USER
START WITH 300
INCREMENT BY 3;

CREATE OR REPLACE TRIGGER TRIG_INSERT_ADMIN_U
BEFORE INSERT ON ADMIN_USER
FOR EACH ROW
BEGIN 
    SELECT SEQ_PRIMKEY_AM_USER.NEXTVAL INTO :NEW.ADMIN_ID FROM DUAL;
END;

-- CREATE SEQUENCE AND ADD TRIGGER FOR CUSTOMER TABLE
CREATE SEQUENCE SEQ_PRIMKEY_CUST
START WITH 400
INCREMENT BY 4;

CREATE OR REPLACE TRIGGER TRIG_INSERT_CUSTOMER
BEFORE INSERT ON CUSTOMER
FOR EACH ROW
BEGIN
    SELECT SEQ_PRIMKEY_CUST.NEXTVAL INTO :NEW.CUSTOMER_ID FROM DUal;
END;

-- CREATE SEQUENCE FOR BANK_ACCOUNT_ID
DROP SEQUENCE SEQ_PRIMKEY_BC;
CREATE SEQUENCE SEQ_PRIMKEY_BC
START WITH 300000
INCREMENT BY 3;

CREATE OR REPLACE TRIGGER TRIG_INSERT_BANK_ACC
BEFORE INSERT ON BANK_ACCOUNT
FOR EACH ROW
BEGIN
    SELECT SEQ_PRIMKEY_BC.NEXTVAL INTO :NEW.BANK_ACCOUNT_ID FROM DUAL;
END;

-- INSERT DATA INTO ADMIN USER

-- WAS UNABLE TO INSERT VALUE TO TABLE SO I DROP THE TRIGGER
DROP TRIGGER TRIG_INSERT_AU;

INSERT INTO ADMIN_USER (ADMIN_ID, ADMIN_FIRSTNAME, ADMIN_LASTNAME, JOB_POSSITION)
VALUES(1, 'John', 'Baptist', ' Bank Manager');

INSERT INTO ADMIN_USER (ADMIN_ID, ADMIN_FIRSTNAME, ADMIN_LASTNAME, JOB_POSSITION)
VALUES(2, 'Jenny', 'Franklin', ' Bank Supervisor');

INSERT INTO ADMIN_USER (ADMIN_ID, ADMIN_FIRSTNAME, ADMIN_LASTNAME, JOB_POSSITION)
VALUES(3, 'Robert', 'Charles', ' IT');

INSERT INTO ADMIN_USER (ADMIN_ID, ADMIN_FIRSTNAME, ADMIN_LASTNAME, JOB_POSSITION)
VALUES(4, 'Rodny', 'Jones', ' Bank Director');

-- insert data into Customer

INSERT INTO CUSTOMER(CUSTOMER_ID, CUSTOMER_FIRSTNAME, CUSTOMER_LASTNAME, CUSTOMER_BIRTHDATE, CUSTOME_STREET_ADDRESS, 
CUSTOMER_STATE, CUSTOMER_COUNTRY, CUSTOMER_POSTALCODE, CUSTOMER_EMAIL, CUSTOMER_PHONE)
VALUES(1, 'Nadege', 'Pierre','08-Jun-73', '012 linden Road', 'NY', 'United States', 11204, 'Npierre@gmail.com', 3456789056);

INSERT INTO CUSTOMER(CUSTOMER_ID, CUSTOMER_FIRSTNAME, CUSTOMER_LASTNAME, CUSTOMER_BIRTHDATE, CUSTOME_STREET_ADDRESS, 
CUSTOMER_STATE, CUSTOMER_COUNTRY, CUSTOMER_POSTALCODE, CUSTOMER_EMAIL, CUSTOMER_PHONE)
VALUES(2, 'Roland', 'Brown','05-Jun-80', '5414 Cali Road', 'CA', 'United States', 30408, 'Rbrown@gmail.com', 34876389056);

INSERT INTO CUSTOMER(CUSTOMER_ID, CUSTOMER_FIRSTNAME, CUSTOMER_LASTNAME, CUSTOMER_BIRTHDATE, CUSTOME_STREET_ADDRESS, 
CUSTOMER_STATE, CUSTOMER_COUNTRY, CUSTOMER_POSTALCODE, CUSTOMER_EMAIL, CUSTOMER_PHONE)
VALUES(3, 'Edgar', 'Bush','09-Aug-93', '3440 lenny  Road', 'NY', 'United States', 11214, 'Ebush@gmail.com', 34567406096);

INSERT INTO CUSTOMER(CUSTOMER_ID, CUSTOMER_FIRSTNAME, CUSTOMER_LASTNAME, CUSTOMER_BIRTHDATE, CUSTOME_STREET_ADDRESS, 
CUSTOMER_STATE, CUSTOMER_COUNTRY, CUSTOMER_POSTALCODE, CUSTOMER_EMAIL, CUSTOMER_PHONE)
VALUES(4, 'Lary', 'Octo','01-Jan-53', '5316 Clairy Street', 'NY', 'United States', 30404, 'lOcto@gmail.com', 3456789056);

-- INSERT DATA INTO ADMIN_CUSTOMER_USER
DROP TRIGGER TRIG_INSERT_ACU;

INSERT INTO ADMIN_CUSTOMER_USER (ADMIN_CUSTOMER_USER_ID, USSERNAME, USSER_PASSWORD, ADMIN_ID)
VALUES(1, 'JohnBaptist', 'Baptist4020', 300);

INSERT INTO ADMIN_CUSTOMER_USER (ADMIN_CUSTOMER_USER_ID, USSERNAME, USSER_PASSWORD, CUSTOMER_ID)
VALUES(2, 'E_BUSH', 'BUSH_COUNT2020', 412);

INSERT INTO ADMIN_CUSTOMER_USER (ADMIN_CUSTOMER_USER_ID, USSERNAME, USSER_PASSWORD, CUSTOMER_ID)
VALUES(3, 'ROLAND_B', 'BestEmp20', 408);

-- Insert data into Bank account table 
INSERT INTO BANK_ACCOUNT(BANK_ACCOUNT_ID, BANK_ACCOUNT_TYPE, BANK_ACCOUNT_NUMBER, BANK_ACCOUNT_SATUS, BALANCE, CUSTOMER_ID)
VALUES(1, 'SAVING', 0008304050, 'OPEN', 60000, 400);
INSERT INTO BANK_ACCOUNT(BANK_ACCOUNT_ID, BANK_ACCOUNT_TYPE, BANK_ACCOUNT_NUMBER, BANK_ACCOUNT_SATUS, BALANCE, CUSTOMER_ID)
VALUES(2, 'CHECKING', 0008769109, ' OPEN', 3000, 400);

INSERT INTO BANK_ACCOUNT(BANK_ACCOUNT_ID, BANK_ACCOUNT_TYPE, BANK_ACCOUNT_NUMBER,BANK_ACCOUNT_SATUS,  BALANCE, CUSTOMER_ID)
VALUES(3, 'CHECKING', 0008209867, ' OVERDRAWN', -20, 404);

INSERT INTO BANK_ACCOUNT(BANK_ACCOUNT_ID, BANK_ACCOUNT_TYPE,BANK_ACCOUNT_NUMBER, BANK_ACCOUNT_SATUS, BALANCE, CUSTOMER_ID)
VALUES(4, 'SAVING', 0008564570, ' CLOSED', 0,  404);

INSERT INTO BANK_ACCOUNT(BANK_ACCOUNT_ID, BANK_ACCOUNT_TYPE, BANK_ACCOUNT_NUMBER, BANK_ACCOUNT_SATUS, BALANCE, CUSTOMER_ID)
VALUES(5, 'CHECKING', 0008456780, 'CLOSED', 0, 408);

INSERT INTO BANK_ACCOUNT(BANK_ACCOUNT_ID, BANK_ACCOUNT_TYPE, BANK_ACCOUNT_NUMBER, BANK_ACCOUNT_SATUS, BALANCE, CUSTOMER_ID)
VALUES(6, 'SAVING', 000878920, 'OPEN', 3000, 412);

INSERT INTO BANK_ACCOUNT(BANK_ACCOUNT_ID, BANK_ACCOUNT_TYPE, BANK_ACCOUNT_NUMBER, BANK_ACCOUNT_SATUS, BALANCE, CUSTOMER_ID)
VALUES(7, 'CREDIT', 000860400, 'OVERDRAWN', -4300000, 416);

-- INSERT DATA INTO TRASACTION 
INSERT INTO TRANSACTIONS (TRANSACTION_ID, TRANSACTION_TYPE, ACCOUNT_TYPE, TRANSACTION_AMOUNT, BANK_ACCOUNT_ID)
VALUES(1, 'WITHDRAW','SAVING', 200, 300000 );

INSERT INTO TRANSACTIONS (TRANSACTION_ID, TRANSACTION_TYPE, ACCOUNT_TYPE, TRANSACTION_AMOUNT, BANK_ACCOUNT_ID)
VALUES(2, 'DEPOSITE','SAVING', 1000, 300000);

INSERT INTO TRANSACTIONS (TRANSACTION_ID, TRANSACTION_TYPE, ACCOUNT_TYPE, TRANSACTION_AMOUNT, BANK_ACCOUNT_ID)
VALUES(3, 'DEPOSITE','CHECKING', 20, 300015 );

INSERT INTO TRANSACTIONS (TRANSACTION_ID, TRANSACTION_TYPE, ACCOUNT_TYPE, TRANSACTION_AMOUNT, BANK_ACCOUNT_ID)
VALUES(4, 'WITHDRAW','SAVING', 20000, 300006 );

--VIEW TABLE CONTENT USING SELECT 

SELECT * FROM ADMIN_USER;
SELECT * FROM CUSTOMER;
SELECT * FROM ADMIN_CUSTOMER_USER;
SELECT * FROM BANK_ACCOUNT;
SELECT * FROM TRANSACTIONS;

-- CREATE PROCEDURE A PROCEDURE TO DEPOSIT MONEY IN BANK_ACCOUNT 

CREATE OR REPLACE PROCEDURE DEPOSSITE_PROCEDURE(
DEPOSIT_AMOUNT IN NUMBER, 
INTO_BANK_ACCOUNT_NUM IN NUMBER
)
IS 
CURRENT_BALANCE BANK_ACCOUNT.BALANCE%TYPE;
BEGIN
    SELECT BALANCE INTO CURRENT_BALANCE
    FROM BANK_ACCOUNT WHERE BANK_ACCOUNT_NUMBER = INTO_BANK_ACCOUNT_NUM;
IF DEPOSIT_AMOUNT>0 -- RETURN POSSITIVE AMOUNT ONLY
 THEN
    UPDATE BANK_ACCOUNT
    SET BALANCE = CURRENT_BALANCE + DEPOSIT_AMOUNT
    WHERE BANK_ACCOUNT_NUMBER = INTO_BANK_ACCOUNT_NUM;
    DBMS_OUTPUT.PUT('BEPOSIT IS COMPLETED');
  COMMIT;
END IF;
 EXCEPTION WHEN OTHERS 
 THEN 
    ROLLBACK; -- IF ANY NUM-POSSITIVE NUMBER IS ENTERED 
END;
  
-- CREATE A PROCEDURE TO WITHDRAW MONEY FROM BANK_ACCOUNT
CREATE OR REPLACE PROCEDURE WITH_PROCEDURE_FROM(
FROM_BANK_ACC_NUM IN NUMBER, WITHDRAW_AMOUNT IN NUMBER
)
IS 
CURRENT_BALANCE BANK_ACCOUNT.BALANCE%TYPE;
BEGIN
    SELECT BALANCE INTO CURRENT_BALANCE FROM BANK_ACCOUNT
    WHERE BANK_ACCOUNT_NUMBER = FROM_BANK_ACC_NUM;
 IF CURRENT_BALANCE < WITHDRAW_AMOUNT
  THEN UPDATE BANK_ACCOUNT -- IF THE WITHDRAW AMOUNT SET CURRENT BALANCE TO NEGATIVE (OVERDRAWN)
  SET BALANCE = CURRENT_BALANCE - WITHDRAW_AMOUNT
  WHERE BANK_ACCOUNT_NUMBER = FROM_BANK_ACC_NUM;
  DBMS_OUTPUT.PUT_LINE('YOUR ACCOUNT IS OVERDRAWN');
 ELSE
  UPDATE BANK_ACCOUNT
  SET BALANCE = CURRENT_BALANCE - WITHDRAW_AMOUNT
  WHERE BANK_ACCOUNT_NUMBER = FROM_BANK_ACC_NUM;
 END IF;
 DBMS_OUTPUT.PUT_LINE('YOU HAVE SUCCESSFULLY WITHDRAWN MONEY FROM YOUR ACCOUNT');
 EXCEPTION 
  WHEN OTHERS 
  THEN 
   ROLLBACK;
   COMMIT;
END;

-- CREATE PROCEDURE FOR USER TO DELETE ACCOUNT IF CUSTOMER HAS NO MONEY IN ACCOUNT
CREATE OR REPLACE PROCEDURE DELETE_ACCOUNT(
IN_CUSTOMER_ID IN NUMBER)
IS 
CURRENT_BALANCE BANK_ACCOUNT.BALANCE%TYPE;
BEGIN
    SELECT BALANCE INTO CURRENT_BALANCE FROM BANK_ACCOUNT
    WHERE CUSTOMER_ID = IN_CUSTOMER_ID;
        IF CURRENT_BALANCE = 0
        THEN DELETE FROM BANK_ACCOUNT
        WHERE CUSTOMER_ID = IN_CUSTOMER_ID;
        END IF;
        COMMIT;
    EXCEPTION
    WHEN OTHERS 
    THEN 
        ROLLBACK;
END;











