CREATE TABLE CUSTOMERS (
    CUSTOMER_ID NUMBER,
    CUSTOMER_NAME VARCHAR(20),
    USERNAME VARCHAR(20),
    PASSWORD VARCHAR2(20), 
    PRIMARY KEY(CUSTOMER_ID)
    )
    
CREATE TABLE ACCOUNTS (
    ACCOUNT_ID NUMBER,
    CUSTOMER_ID NUMBER,
    BALANCE NUMBER(10,3),
    PRIMARY KEY(ACCOUNT_ID),
    FOREIGN KEY(CUSTOMER_ID) REFERENCES CUSTOMER(CUSTOMER_ID)
    )

CREATE TABLE TRANSACTIONS (
    TRANSACTION_ID NUMBER,
    ACCOUNT_ID NUMBER,
    TRANSACTION_TYPE VARCHAR(20),
    TRANSACTION_AMOUNT NUMBER(10,3),
    PRIMARY KEY(TRANSACTION_ID),
    FOREIGN KEY(ACCOUNT_ID) REFERENCES ACCOUNT(ACCOUNT_ID)
    )

CREATE TABLE ADDRESSES (
    CUSTOMER_ID NUMBER,
    ADDRESS VARCHAR(20),
    CITY VARCHAR(20),
    STATE VARCHAR(20),
    ZIPCODE VARCHAR(20),
    FOREIGN KEY(CUSTOMER_ID) REFERENCES CUSTOMER(CUSTOMER_ID)
    )
 
DESCRIBE CUSTOMERS

CREATE SEQUENCE CUSTOMER_ID
INCREMENT BY 1
START WITH 1000

CREATE SEQUENCE ACCOUNT_ID
INCREMENT BY 1
START WITH 1

CREATE SEQUENCE TRANSACTION_ID
INCREMENT BY 1
START WITH 100

INSERT INTO CUSTOMERS VALUES (1001, 'Angela Michael','user1','password1');
INSERT INTO CUSTOMERS VALUES (1002, 'Susan Day','user2','password2');
INSERT INTO CUSTOMERS VALUES (1003, 'John Doe','user3','password3');

INSERT INTO ACCOUNTS VALUES (1,1001,2000);
INSERT INTO ACCOUNTS VALUES (2,1002,1150);
INSERT INTO ACCOUNTS VALUES (3,1003,3000);

INSERT INTO TRANSACTIONS VALUES (100,1,'WITHDRAWAL',125);
INSERT INTO TRANSACTIONS VALUES (101,2,'TRANSFER',250);
INSERT INTO TRANSACTIONS VALUES (102,3,'DEPOSIT',350);

INSERT INTO ADDRESSES VALUES (1001,'100 WALL STREET','NY','NY',10005);
INSERT INTO ADDRESSES VALUES (1002,'100 WALL STREET','NY','NY',10005);
INSERT INTO ADDRESSES VALUES (1003,'100 WALL STREET','NY','NY',10005);

 /*Created a FUNDSTRANSFER Stored Procedure to transfer the money from one account to another account*/
CREATE PROCEDURE TRANSFERFUNDS (@SOURCEID INT, @DESTID INT, @AMT INT)
AS
BEGIN
UPDATE BANKING SET BALANCE = BALANCE -@AMT WHERE ACCOUNT=@SOURCEID
UPDATE BANKING SET BALANCE = BALANCE+@AMT WHERE ACCOUNT=@DESTID
END
GO

 /*Checking the Balance before Transfering the money, then Transfering the money using Stored Procedure and checking the Balance after transfering*/
SELECT * FROM ACCOUNTS
EXEC TRANSFERFUNDS 1,2, 500
SELECT * FROM ACCOUNTS
GO

DESCRIBE ACCOUNTS

SELECT * FROM ACCOUNTS

ALTER PROCEDURE TRANSFERFUNDS(@SOURCEID INT, @DESTID INT, @AMT INT)
AS
BEGIN

DECLARE @COUNT1 INT, @COUNT2 INT

BEGIN TRANSACTION

UPDATE BANKING SET BALANCE=BALANCE-@AMT WHERE ACCOUNT=@SOURCEID
SET @COUNT1=@@ROWCOUNT
UPDATE BANKING SET BALANCE=BALANCE+@AMT WHERE ACCOUNT=@DESTID
SET @COUNT2=@@ROWCOUNT

IF @COUNT1=@COUNT2
BEGIN
COMMIT
PRINT 'AMOUNT HAS BEEN TRANFERRED'
END

ELSE

BEGIN 
ROLLBACK
PRINT 'AMOUNT TRANFERED FAILED'
END
END

