CREATE TABLE CUSTOMER(
CUSTOMER_ID INTEGeR PRIMARY KEY,
FIRSTNAME VARCHAR2 (20),
LASTNAME VARCHAR2 (20),
ACCOUNT_ID INTEGER,
TRANSACTION_ID INTEGER,
BALANCE NUMBER);
INSERT INTO CUSTOMER VALUES(1,'JAMES','HALLOWAY',NULL,NULL,NULL);
INSERT INTO CUSTOMER VALUES(2,'ZENOBIA','PETERSEN',NULL,NULL,NULL);
INSERT INTO CUSTOMER VALUES(3,'STEPHANIE','JASMIN',NULL,NULL,NULL);
INSERT INTO CUSTOMER VALUES(4,'RAYMOMD','LAU',NULL,NULL,NULL);

ALTER TABLE CUSTOMER
ADD CONSTRAINT FK_CUSTOMER_ACCOUNT
FOREIGN KEY (ACCOUNT_ID) REFERENCES ACCOUNT(ACCOUNT_ID);

ALTER TABLE CUSTOMER
ADD CONSTRAINT FK_CUSTOMER_TRANSACTION
FOREIGN KEY (TRANSACTION_ID) REFERENCES TRANSACTION(TRANSACTION_ID);



CREATE TABLE TRANSACTION(
TRANSACTION_ID INTEGER PRIMARY KEY,
CUSTOMER_ID INTEGER,
ACCOUNT_ID INTEGER,
AMOUNT NUMBER);
INSERT INTO TRANSACTION VALUES(001,1,001,500,1500,1000);
INSERT INTO TRANSACTION VALUES(002,2,002,1500,2500,1000);
INSERT INTO TRANSACTION VALUES(003,3,003,500,1500,1000);
INSERT INTO TRANSACTION VALUES(004,4,004,500,1500,1000);

ALTER TABLE TRANSACTION
ADD CONSTRAINT FK_TRANSACTION_ACCOUNT
FOREIGN KEY (ACCOUNT_ID) REFERENCES ACCOUNT(ACCOUNT_ID);

ALTER TABLE TRANSACTION
ADD CONSTRAINT FK_TRANSACTION_CUSTOMER
FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMER(CUSTOMER_ID);
ALTER TABLE TRANSACTION ADD DEPOSIT NUMBER ;
ALTER TABLE TRANSACTION ADD WITHDRAW NUMBER ;



CREATE TABLE ACCOUNT(
ACCOUNT_ID INTEGER PRIMARY KEY,
CUSTOMER_ID INTEGER,
TRANSACTION_ID INTEGER,
BALANCE NUMBER);
INSERT INTO ACCOUNT VALUES(01,1,NULL,500);
INSERT INTO ACCOUNT VALUES(02,2,NULL,1500);
INSERT INTO ACCOUNT VALUES(03,3,NULL,2000);
INSERT INTO ACCOUNT VALUES(04,4,NULL,12000);

ALTER TABLE ACCOUNT
ADD CONSTRAINT FK_ACCOUNT_CUSTOMER
FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMER(CUSTOMER_ID);

ALTER TABLE ACCOUNT
ADD CONSTRAINT FK_ACCOUNT_TRANSACTION
FOREIGN KEY (TRANSACTION_ID) REFERENCES TRANSACTION(TRANSACTION_ID);

CREATE TABLE FUNCTION (
FUNCTION_ID INTEGER PRIMARY KEY,
ADMIN_ID INTEGER,
CUSTOMER_ID NUMBER );


----ALTER TABLE FUCNTION
ADD CONSTRAINT FK_FUNCTION_CUSTOMER
FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMER(CUSTOMER_ID);
----SEQUENCE
CREATE SEQUENCE SQ_CUSTOMER_PK
START WITH 3
INCREMENT BY 2;

CREATE SEQUENCE SQ_ACCOUNT_PK
START WITH 3
INCREMENT BY 
-- TRIGGERS
CREATE OR REPLACE TRIGGER TR_INSERT_TRANSACTION
BEFORE INSERT ON ACCOUNT
FOR EACH ROW
BEGIN
SELECT SQ_ACCOUNT_PK.NEXTVAL INTO :NEW.ACCOUNT_ID FROM DUAL;
END;

 --STORED PROCEDURE
 
 CREATE OR REPLACE PROCEDURE WIT_PROC (BALANCE  NUMBER(),WITHDRAW  NUMBER() )
 IS
 BALANCE NUMBER();
 BEGIN
 SELECT BALANCE
 INTO BALANCE
 FROM TRANSACTION
 WHERE ACCOUNT_ID = BALANCE;
 IF BALANCE < WITHRAW THEN
 DBMS_OUTPUT_PUT_LINE('THE AMOUNT ENTER IS MORE THANT YOUR BALANCE');
 ELSE
 UPDATE ACCOUNT
 SET BALANCE = BALANCE - WITHRAW
 WHERE BALANCE = BALANCE;
 END IF;
 DBMS_OUTPUT_PUT_LINE('MONEY HAS BEEN WITHDRAW SUCCESSFULL');
 END;
 
  
 CREATE OR REPLACE PROCEDURE JDBC_BANK_PROCEDURE
IS 
BEGIN 
  DBMS_OUTPUT.PUT_LINE(' WELCOME TO JDBC BANK, WE ARE HERE TO HELP OUR CUSTOMERS!');
END;
--INVOKE JBDC
BEGIN 
  JDBC_BANK_PROCEDURE();
END;


