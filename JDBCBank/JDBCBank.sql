CREATE SEQUENCE SQ_PK_USER
START WITH 5000
INCREMENT BY 5;

CREATE SEQUENCE SQ_PK_ACCOUNT
START WITH 7000
INCREMENT BY 7;

CREATE SEQUENCE SQ_PK_TRANSACTION
START WITH 9000
INCREMENT BY 9;

CREATE OR REPLACE TRIGGER TR_INSERT_USER
BEFORE INSERT ON USERS
FOR EACH ROW
BEGIN
    SELECT SQ_PK_USER.NEXTVAL INTO :NEW.USERID FROM DUAL;
END;

CREATE OR REPLACE TRIGGER TR_INSERT_ACCOUNT
BEFORE INSERT ON ACCOUNTS
FOR EACH ROW
BEGIN
    SELECT SQ_PK_ACCOUNT.NEXTVAL INTO :NEW.ACCOUNTID FROM DUAL;
END;

CREATE TABLE USERS(
    USERID NUMBER NOT NULL,
    USERNAME VARCHAR2(100) NOT NULL UNIQUE,
    PASSKEY VARCHAR2(100) NOT NULL, --PASSWORD
    USERTYPE VARCHAR2(10) NOT NULL CONSTRAINT UTYPE CHECK (USERTYPE IN ('C','A')),
    FIRSTNAME VARCHAR2(40),
    LASTNAME VARCHAR2(20),
    ADDRESS VARCHAR2(70),
    CITY VARCHAR2(40),
    STATE VARCHAR2(40),
    COUNTRY VARCHAR2(40),
    POSTALCODE VARCHAR2(10),
    PHONE VARCHAR2(24),
    EMAIL VARCHAR2(60),
    CONSTRAINT PK_USER PRIMARY KEY (USERID)
);

CREATE TABLE ACCOUNTS (
    ACCOUNTID NUMBER NOT NULL,
    ACCOUNTUSER NUMBER NOT NULL,
    ACCOUNTTYPE VARCHAR2(10) NOT NULL, --CONSTRAINT ATYPE CHECK (ACCOUNTTYPE IN ('C','S')),
    BALANCE NUMBER NOT NULL,
    ACCOUNTNUMBER VARCHAR2(20) UNIQUE,
    OPENDATE VARCHAR2(50) DEFAULT to_char(CURRENT_TIMESTAMP,'DD-MON-YYYY HH24:MI:SS.FF'),
    CONSTRAINT PK_ACCOUNT PRIMARY KEY (ACCOUNTID),
    CONSTRAINT FK_ACCOUNT_USER FOREIGN KEY (ACCOUNTUSER) REFERENCES USERS(USERID) ON DELETE CASCADE
);

CREATE TABLE TRANSACTIONS (
    TRANSACTIONID NUMBER NOT NULL,
    TRANSACTIONACCOUNT NUMBER NOT NULL,
    TRANSACTIONUSER NUMBER NOT NULL,
    TRANSACTIONTYPE VARCHAR2(10) NOT NULL CONSTRAINT TTYPE CHECK (TRANSACTIONTYPE IN ('W','D')),
    TRANSACTIONTIME VARCHAR2(50) DEFAULT to_char(CURRENT_TIMESTAMP,'DD-MON-YYYY HH24:MI:SS.FF'),
    PRIORBALANCE NUMBER NOT NULL,
    CURRENTBALANCE NUMBER NOT NULL,
    CONSTRAINT PK_TRANSACTION PRIMARY KEY (TRANSACTIONID),
    CONSTRAINT FK_TRANSACTION_USER FOREIGN KEY (TRANSACTIONUSER) REFERENCES USERS(USERID) ON DELETE CASCADE,
    CONSTRAINT FK_TRANSACTION_ACCOUNT FOREIGN KEY (TRANSACTIONACCOUNT) REFERENCES ACCOUNTS(ACCOUNTID) ON DELETE CASCADE
);

CREATE OR REPLACE PROCEDURE CREATE_USER(U IN VARCHAR2, P IN VARCHAR2)
IS 
CREATED VARCHAR(20);
BEGIN
    INSERT INTO USERS (USERNAME, PASSKEY, USERTYPE) 
    VALUES(U,P,'C');
    CREATED := 'TRUE';
    DBMS_OUTPUT.PUT_LINE('CREATED USER');
END;

BEGIN 
    CREATE_USER('Jenny','jenny*');
END;

