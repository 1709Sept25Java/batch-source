/*
-- UNCOMMENT AND RUN THIS BLOCK TO RESET TABLE AND FILL WITH DUMMY DATA --

TRUNCATE TABLE ACCOUNTS;
ALTER TABLE ACCOUNTS
DROP CONSTRAINT FK_USER_ID;
TRUNCATE TABLE USERS;

ALTER TABLE ACCOUNTS
ADD CONSTRAINT FK_USER_ID
    FOREIGN KEY (ACCOUNTHOLDER_ID)
    REFERENCES USERS (USER_ID)
    ON DELETE SET NULL;

DROP SEQUENCE SQ_USER_ID;
DROP SEQUENCE SQ_ACCOUNT_NUMBER;

CREATE SEQUENCE SQ_USER_ID
START WITH 1
INCREMENT BY 1;

CREATE SEQUENCE SQ_ACCOUNT_NUMBER
START WITH 100000
INCREMENT BY 1;

CREATE OR REPLACE TRIGGER INSERT_USER
BEFORE INSERT ON USERS
FOR EACH ROW
BEGIN
    SELECT SQ_USER_ID.NEXTVAL INTO :NEW.USER_ID FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER INSERT_ACCOUNT
BEFORE INSERT ON ACCOUNTS
FOR EACH ROW
BEGIN
    SELECT SQ_ACCOUNT_NUMBER.NEXTVAL INTO :NEW.ACCOUNT_NUMBER FROM DUAL;
END;
/

BEGIN
    NEW_USER('joe','p4ssw0rd');
    NEW_USER('paul', 'hiimpaul');
    NEW_USER('newton','lookanapple');
    NEW_USER('ghandi','pcebro');
    NEW_USER('hemingway','weirdcats');
    NEW_USER('lion','tiger');
    NEW_USER('george','jungledude');
    NEW_USER('liam','pa55word');
    NEW_USER('pontiac','yemen');
    NEW_USER('crehm','pass');
    NEW_ACCOUNT('hemingway');
    NEW_ACCOUNT('hemingway');
END;
/
COMMIT;
--ENDS HERE--
*/


CREATE TABLE USERS(
USER_ID INTEGER PRIMARY KEY,
USER_NAME VARCHAR2(20),
USER_PASS VARCHAR2(20)
);

CREATE TABLE ACCOUNTS(
ACCOUNT_NUMBER INTEGER PRIMARY KEY,
ACCOUNTHOLDER_ID INTEGER, -- FK from users
ACCOUNT_BALANCE INTEGER
);

ALTER TABLE ACCOUNTS
ADD CONSTRAINT FK_USER_ID
    FOREIGN KEY (ACCOUNTHOLDER_ID)
    REFERENCES USERS (USER_ID)
    ON DELETE SET NULL;

CREATE SEQUENCE SQ_USER_ID
START WITH 1
INCREMENT BY 1;


CREATE SEQUENCE SQ_ACCOUNT_NUMBER
START WITH 100000
INCREMENT BY 1;

CREATE OR REPLACE TRIGGER INSERT_USER
BEFORE INSERT ON USERS
FOR EACH ROW
BEGIN
    SELECT SQ_USER_ID.NEXTVAL INTO :NEW.USER_ID FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER INSERT_ACCOUNT
BEFORE INSERT ON ACCOUNTS
FOR EACH ROW
BEGIN
    SELECT SQ_ACCOUNT_NUMBER.NEXTVAL INTO :NEW.ACCOUNT_NUMBER FROM DUAL;
END;
/
    
CREATE OR REPLACE PROCEDURE DELETE_BY_USER(USER_ID_INPUT IN USERS.USER_ID%TYPE)
IS
BEGIN
    DELETE FROM ACCOUNTS WHERE ACCOUNTHOLDER_ID = USER_ID_INPUT;
    DELETE FROM USERS WHERE USER_ID = USER_ID_INPUT;
END;
/

CREATE OR REPLACE PROCEDURE DELETE_BY_ACCOUNT(ACCOUNT_NUMBER_INPUT IN ACCOUNTS.ACCOUNT_NUMBER%TYPE)
IS
OWNER_ID INTEGER;
OWNER_ACCOUNTS INTEGER;
CURSOR C1(OWNER_ID_FROM_ACCOUNT IN INTEGER) IS
    SELECT ACCOUNT_NUMBER
    FROM ACCOUNTS
    WHERE OWNER_ID_FROM_ACCOUNT = ACCOUNTHOLDER_ID;
BEGIN
    SELECT ACCOUNTHOLDER_ID INTO OWNER_ID FROM ACCOUNTS WHERE ACCOUNT_NUMBER = ACCOUNT_NUMBER_INPUT;
    DELETE FROM ACCOUNTS WHERE ACCOUNT_NUMBER = ACCOUNT_NUMBER_INPUT;
    OPEN C1(OWNER_ID);
    FETCH C1 INTO OWNER_ACCOUNTS;
    IF C1%NOTFOUND THEN 
        DELETE FROM USERS WHERE USER_ID = OWNER_ID;
    END IF;
    CLOSE C1;
END;
/

CREATE OR REPLACE PROCEDURE DEPOSIT(AMT IN ACCOUNTS.ACCOUNT_BALANCE%TYPE, ACT_NUM IN ACCOUNTS.ACCOUNT_NUMBER%TYPE)
IS
BEGIN
    UPDATE ACCOUNTS
    SET ACCOUNT_BALANCE = ACCOUNT_BALANCE + AMT
    WHERE ACCOUNT_NUMBER = ACT_NUM;
END;
/

CREATE OR REPLACE PROCEDURE WITHDRAW(AMT IN ACCOUNTS.ACCOUNT_BALANCE%TYPE, ACT_NUM IN ACCOUNTS.ACCOUNT_NUMBER%TYPE)
IS
NEW_BALANCE INTEGER;
BEGIN
    SAVEPOINT BEFORE_WITHDRAWAL_ATTEMPT;
    UPDATE ACCOUNTS
    SET ACCOUNT_BALANCE = ACCOUNT_BALANCE - AMT
    WHERE ACCOUNT_NUMBER = ACT_NUM;
    SELECT ACCOUNT_BALANCE INTO NEW_BALANCE
        FROM ACCOUNTS
        WHERE ACCOUNT_NUMBER = ACT_NUM;
    IF NEW_BALANCE<0 THEN
        ROLLBACK TO BEFORE_WITHDRAWAL_ATTEMPT;
    END IF;    
END;
/

CREATE OR REPLACE FUNCTION RETURN_BALANCE(ACT_NUM IN INTEGER)
RETURN INTEGER
IS
CURRENT_BALANCE INTEGER;
BEGIN
    SELECT ACCOUNT_BALANCE INTO CURRENT_BALANCE
        FROM ACCOUNTS
        WHERE ACCOUNT_NUMBER = ACT_NUM;
    RETURN CURRENT_BALANCE;
END;
/

CREATE OR REPLACE PROCEDURE NEW_USER (NEW_USER_NAME IN USERS.USER_NAME%TYPE, NEW_USER_PASS IN USERS.USER_PASS%TYPE)
IS
BEGIN
    INSERT INTO USERS (USER_NAME, USER_PASS) VALUES (NEW_USER_NAME, NEW_USER_PASS);
    NEW_ACCOUNT(NEW_USER_NAME);
END;
/

CREATE OR REPLACE PROCEDURE NEW_ACCOUNT (NEW_USER_NAME IN USERS.USER_NAME%TYPE)
IS
OWNER_ID INTEGER;
BEGIN
    SELECT USER_ID INTO OWNER_ID
        FROM USERS
        WHERE USER_NAME = NEW_USER_NAME;
    INSERT INTO ACCOUNTS (ACCOUNTHOLDER_ID, ACCOUNT_BALANCE) VALUES (OWNER_ID,0);
END;
/

CREATE OR REPLACE PROCEDURE CHECK_USER (NEW_USER_NAME IN USERS.USER_NAME%TYPE, OUTPUT_NUM OUT INTEGER)
IS
PLACEHOLDER USERS.USER_NAME%TYPE;
CURSOR C1 IS
    SELECT USER_NAME
    FROM USERS
    WHERE USER_NAME = NEW_USER_NAME;
BEGIN
    OPEN C1;
    FETCH C1 INTO PLACEHOLDER;
    OUTPUT_NUM := 1;
    IF C1%NOTFOUND THEN
        OUTPUT_NUM := 0;
    END IF;
END;
/

SET SERVEROUTPUT ON;

CREATE OR REPLACE PROCEDURE CHECK_PASSWORD(
    CURRENT_USER_NAME IN USERS.USER_NAME%TYPE, 
    PROPOSED_PASSWORD IN USERS.USER_PASS%TYPE,
    OUTPUT_NUM OUT INTEGER)
IS
CURRENT_USER_PASS USERS.USER_PASS%TYPE;
CURSOR C1 IS
    SELECT USER_PASS
    FROM USERS
    WHERE USER_NAME = CURRENT_USER_NAME;
BEGIN
    OPEN C1;
    FETCH C1 INTO CURRENT_USER_PASS;
    OUTPUT_NUM := 0;
    IF CURRENT_USER_PASS = PROPOSED_PASSWORD THEN
        OUTPUT_NUM := 1;
    END IF;
END;
/

CREATE OR REPLACE PROCEDURE CHECK_USER_ID (USER_ID_INPUT IN USERS.USER_ID%TYPE, OUTPUT_NUM OUT INTEGER)
IS
PLACEHOLDER USERS.USER_ID%TYPE;
CURSOR C1 IS
    SELECT USER_ID
    FROM USERS
    WHERE USER_ID = USER_ID_INPUT;
BEGIN
    OPEN C1;
    FETCH C1 INTO PLACEHOLDER;
    OUTPUT_NUM := 1;
    IF C1%NOTFOUND THEN
        OUTPUT_NUM := 0;
    END IF;
END;
/
