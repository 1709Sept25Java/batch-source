--NOTE PLURAL TABLE NAMES
CREATE TABLE DEPARTMENTS ( 
DEPARTMENT_ID NUMBER PRIMARY KEY, 
DEPARTMENT_NAME VARCHAR2(200) NOT NULL);

CREATE TABLE EMPLOYEES(
EMPLOYEE_ID NUMBER PRIMARY KEY, 
EMP_FIRSTNAME VARCHAR(100) NOT NULL, 
EMP_LASTNAME VARCHAR(100) NOT NULL, 
SALARY NUMBER, 
EMP_EMAIL VARCHAR(100),
DEPARTMENT_ID NUMBER NOT NULL
CONSTRAINT FK_DEPT_EMP REFERENCES DEPARTMENTS(DEPARTMENT_ID));

--Create a sequence and trigger to auto-generate primary key values for both tables. 

CREATE SEQUENCE SQ_PK_DEPT
START WITH 3000
INCREMENT BY 3;

CREATE SEQUENCE SQ_PK_EMP
START WITH 5000
INCREMENT BY 5;

CREATE OR REPLACE TRIGGER TR_INSERT_DEPT
BEFORE INSERT ON DEPARTMENTS
FOR EACH ROW
BEGIN
    SELECT SQ_PK_DEPT.NEXTVAL INTO :NEW.DEPARTMENT_ID FROM DUAL;
END;


CREATE OR REPLACE TRIGGER TR_INSERT_EMP
BEFORE INSERT ON EMPLOYEES
FOR EACH ROW
BEGIN
    SELECT SQ_PK_EMP.NEXTVAL INTO :NEW.EMPLOYEE_ID FROM DUAL;
END;

--Insert at least six employees and three departments. 

bEGIN
INSERT INTO DEPARTMENTS(DEPARTMENT_NAME) VALUES ('D1');
INSERT INTO DEPARTMENTS(DEPARTMENT_NAME) VALUES ('D2');
INSERT INTO DEPARTMENTS(DEPARTMENT_NAME) VALUES ('D3');
COMMIT;

INSERT INTO EMPLOYEES(EMP_FIRSTNAME, EMP_LASTNAME, SALARY, EMP_EMAIL,DEPARTMENT_ID)
VALUES ('F1', 'L1', 45000, 'f1@gmail.com', 3000);

INSERT INTO EMPLOYEES(EMP_FIRSTNAME, EMP_LASTNAME, SALARY, EMP_EMAIL,DEPARTMENT_ID)
VALUES ('F2', 'L2', 52000, 'f3@gmail.com', 3003);

INSERT INTO EMPLOYEES(EMP_FIRSTNAME, EMP_LASTNAME, SALARY, EMP_EMAIL,DEPARTMENT_ID)
VALUES ('F3', 'L3', 49000, 'f3@gmail.com', 3000);

INSERT INTO EMPLOYEES(EMP_FIRSTNAME, EMP_LASTNAME, SALARY, EMP_EMAIL,DEPARTMENT_ID)
VALUES ('F4', 'L4', 55000, 'f4@gmail.com', 3006);


INSERT INTO EMPLOYEES(EMP_FIRSTNAME, EMP_LASTNAME, SALARY, EMP_EMAIL,DEPARTMENT_ID)
VALUES ('F5', 'L5', 65000, 'f5@gmail.com', 3006);

INSERT INTO EMPLOYEES(EMP_FIRSTNAME, EMP_LASTNAME, SALARY, EMP_EMAIL,DEPARTMENT_ID)
VALUES ('F6', 'L6', 63000, 'f6@gmail.com', 3003);
END;

--CHECK ENTRIES
SELECT * FROM EMPLOYEES;
SELECT * FROM DEPARTMENTS;

--Create a stored procedure SP_GIVE_RAISE which takes in a DEPARTMENT_ID and increases each 
--employee's salary within the department by 10%, and returns the new average salary for the 
--department, as well as a boolean value indicating whether the ID entered corresponds to a valid
--department. 

CREATE OR REPLACE PROCEDURE SP_GIVE_RAISE (D_ID IN NUMBER, S OUT SYS_REFCURSOR)
IS 
V_DEPT NUMBER;
BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
SELECT COUNT(D.DEPARTMENT_ID) INTO V_DEPT FROM DEPARTMENTS D
WHERE D.DEPARTMENT_ID = D_ID;
IF V_DEPT > 0 THEN
    DBMS_OUTPUT.PUT_LINE('VALID DEPT');
    UPDATE EMPLOYEES E
    SET E.SALARY = E.SALARY * 1.1 
    WHERE E.DEPARTMENT_ID = D_ID;
    OPEN S FOR
        SELECT AVG(E.SALARY) FROM EMPLOYEES E
        WHERE E.DEPARTMENT_ID = D_ID;
ELSE
    DBMS_OUTPUT.PUT_LINE('NOT VALID DEPT');
END IF;
COMMIT;
EXCEPTION
WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('FAILED TO INCREASE DEPT SALARY');

ROLLBACK;
END;

DECLARE
S SYS_REFCURSOR;
S_AVG NUMBER;
BEGIN
    SP_GIVE_RAISE(3000, S);
    FETCH S INTO S_AVG;
    DBMS_OUTPUT.PUT_LINE('AVG SALARY: '||S_AVG);
END;
