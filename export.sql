--------------------------------------------------------
--  File created - Sunday-October-08-2017   
--------------------------------------------------------
--------------------------------------------------------
--  DDL for Type EM_TABLE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TYPE "CHINOOK"."EM_TABLE" AS TABLE OF RESULT_TABLE;

/
--------------------------------------------------------
--  DDL for Type RESULT_TABLE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TYPE "CHINOOK"."RESULT_TABLE" AS OBJECT
(
    EMPLOYEEID INTEGER,
    LASTNAME VARCHAR2(200),
    FIRSTNAME VARCHAR2(200)
);

/
--------------------------------------------------------
--  DDL for Table ALBUM
--------------------------------------------------------

  CREATE TABLE "CHINOOK"."ALBUM" 
   (	"ALBUMID" NUMBER, 
	"TITLE" VARCHAR2(160 BYTE), 
	"ARTISTID" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table ARTIST
--------------------------------------------------------

  CREATE TABLE "CHINOOK"."ARTIST" 
   (	"ARTISTID" NUMBER, 
	"NAME" VARCHAR2(120 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table CUSTOMER
--------------------------------------------------------

  CREATE TABLE "CHINOOK"."CUSTOMER" 
   (	"CUSTOMERID" NUMBER, 
	"FIRSTNAME" VARCHAR2(40 BYTE), 
	"LASTNAME" VARCHAR2(20 BYTE), 
	"COMPANY" VARCHAR2(80 BYTE), 
	"ADDRESS" VARCHAR2(70 BYTE), 
	"CITY" VARCHAR2(40 BYTE), 
	"STATE" VARCHAR2(40 BYTE), 
	"COUNTRY" VARCHAR2(40 BYTE), 
	"POSTALCODE" VARCHAR2(10 BYTE), 
	"PHONE" VARCHAR2(24 BYTE), 
	"FAX" VARCHAR2(24 BYTE), 
	"EMAIL" VARCHAR2(60 BYTE), 
	"SUPPORTREPID" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table EMPLOYEE
--------------------------------------------------------

  CREATE TABLE "CHINOOK"."EMPLOYEE" 
   (	"EMPLOYEEID" NUMBER, 
	"LASTNAME" VARCHAR2(20 BYTE), 
	"FIRSTNAME" VARCHAR2(20 BYTE), 
	"TITLE" VARCHAR2(30 BYTE), 
	"REPORTSTO" NUMBER, 
	"BIRTHDATE" DATE, 
	"HIREDATE" DATE, 
	"ADDRESS" VARCHAR2(70 BYTE), 
	"CITY" VARCHAR2(40 BYTE), 
	"STATE" VARCHAR2(40 BYTE), 
	"COUNTRY" VARCHAR2(40 BYTE), 
	"POSTALCODE" VARCHAR2(10 BYTE), 
	"PHONE" VARCHAR2(24 BYTE), 
	"FAX" VARCHAR2(24 BYTE), 
	"EMAIL" VARCHAR2(60 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table GENRE
--------------------------------------------------------

  CREATE TABLE "CHINOOK"."GENRE" 
   (	"GENREID" NUMBER, 
	"NAME" VARCHAR2(120 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table INVOICE
--------------------------------------------------------

  CREATE TABLE "CHINOOK"."INVOICE" 
   (	"INVOICEID" NUMBER, 
	"CUSTOMERID" NUMBER, 
	"INVOICEDATE" DATE, 
	"BILLINGADDRESS" VARCHAR2(70 BYTE), 
	"BILLINGCITY" VARCHAR2(40 BYTE), 
	"BILLINGSTATE" VARCHAR2(40 BYTE), 
	"BILLINGCOUNTRY" VARCHAR2(40 BYTE), 
	"BILLINGPOSTALCODE" VARCHAR2(10 BYTE), 
	"TOTAL" NUMBER(10,2)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table INVOICELINE
--------------------------------------------------------

  CREATE TABLE "CHINOOK"."INVOICELINE" 
   (	"INVOICELINEID" NUMBER, 
	"INVOICEID" NUMBER, 
	"TRACKID" NUMBER, 
	"UNITPRICE" NUMBER(10,2), 
	"QUANTITY" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table MEDIATYPE
--------------------------------------------------------

  CREATE TABLE "CHINOOK"."MEDIATYPE" 
   (	"MEDIATYPEID" NUMBER, 
	"NAME" VARCHAR2(120 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table PLAYLIST
--------------------------------------------------------

  CREATE TABLE "CHINOOK"."PLAYLIST" 
   (	"PLAYLISTID" NUMBER, 
	"NAME" VARCHAR2(120 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table PLAYLISTTRACK
--------------------------------------------------------

  CREATE TABLE "CHINOOK"."PLAYLISTTRACK" 
   (	"PLAYLISTID" NUMBER, 
	"TRACKID" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TRACK
--------------------------------------------------------

  CREATE TABLE "CHINOOK"."TRACK" 
   (	"TRACKID" NUMBER, 
	"NAME" VARCHAR2(200 BYTE), 
	"ALBUMID" NUMBER, 
	"MEDIATYPEID" NUMBER, 
	"GENREID" NUMBER, 
	"COMPOSER" VARCHAR2(220 BYTE), 
	"MILLISECONDS" NUMBER, 
	"BYTES" NUMBER, 
	"UNITPRICE" NUMBER(10,2)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_INVOICE
--------------------------------------------------------

  CREATE UNIQUE INDEX "CHINOOK"."PK_INVOICE" ON "CHINOOK"."INVOICE" ("INVOICEID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_ALBUM
--------------------------------------------------------

  CREATE UNIQUE INDEX "CHINOOK"."PK_ALBUM" ON "CHINOOK"."ALBUM" ("ALBUMID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_ARTIST
--------------------------------------------------------

  CREATE UNIQUE INDEX "CHINOOK"."PK_ARTIST" ON "CHINOOK"."ARTIST" ("ARTISTID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_MEDIATYPE
--------------------------------------------------------

  CREATE UNIQUE INDEX "CHINOOK"."PK_MEDIATYPE" ON "CHINOOK"."MEDIATYPE" ("MEDIATYPEID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_PLAYLISTTRACK
--------------------------------------------------------

  CREATE UNIQUE INDEX "CHINOOK"."PK_PLAYLISTTRACK" ON "CHINOOK"."PLAYLISTTRACK" ("PLAYLISTID", "TRACKID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_CUSTOMER
--------------------------------------------------------

  CREATE UNIQUE INDEX "CHINOOK"."PK_CUSTOMER" ON "CHINOOK"."CUSTOMER" ("CUSTOMERID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_INVOICELINE
--------------------------------------------------------

  CREATE UNIQUE INDEX "CHINOOK"."PK_INVOICELINE" ON "CHINOOK"."INVOICELINE" ("INVOICELINEID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_EMPLOYEE
--------------------------------------------------------

  CREATE UNIQUE INDEX "CHINOOK"."PK_EMPLOYEE" ON "CHINOOK"."EMPLOYEE" ("EMPLOYEEID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_TRACK
--------------------------------------------------------

  CREATE UNIQUE INDEX "CHINOOK"."PK_TRACK" ON "CHINOOK"."TRACK" ("TRACKID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_GENRE
--------------------------------------------------------

  CREATE UNIQUE INDEX "CHINOOK"."PK_GENRE" ON "CHINOOK"."GENRE" ("GENREID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_PLAYLIST
--------------------------------------------------------

  CREATE UNIQUE INDEX "CHINOOK"."PK_PLAYLIST" ON "CHINOOK"."PLAYLIST" ("PLAYLISTID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Trigger AFTER_DELETE_CUSTOMER
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "CHINOOK"."AFTER_DELETE_CUSTOMER" 
AFTER DELETE ON CUSTOMER
FOR EACH ROW
BEGIN
    INSERT INTO CUSTOMER(CUSTOMERID, FIRSTNAME, LASTNAME, EMAIL)
    VALUES(:NEW.CUSTOMERID, :NEW.FIRSTNAME, :NEW.LASTNAME, :NEW.EMAIL);
END;
/
ALTER TRIGGER "CHINOOK"."AFTER_DELETE_CUSTOMER" ENABLE;
--------------------------------------------------------
--  DDL for Trigger AFTER_INSERT_EMP
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "CHINOOK"."AFTER_INSERT_EMP" 
AFTER INSERT ON EMPLOYEE
FOR EACH ROW
BEGIN
    INSERT INTO EMPLOYEE(EMPLOYEEID, FIRSTNAME, LASTNAME)
    VALUES(:NEW.EMPLOYEEID, :NEW.FIRSTNAME, :NEW.LASTNAME);
END;
/
ALTER TRIGGER "CHINOOK"."AFTER_INSERT_EMP" ENABLE;
--------------------------------------------------------
--  DDL for Trigger AFTER_UPDATE_ALBUM
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "CHINOOK"."AFTER_UPDATE_ALBUM" 
AFTER UPDATE ON ALBUM
FOR EACH ROW 
BEGIN
    INSERT INTO ALBUM(ALBUMID, TITLE, ARTISTID)
    VALUES(:NEW.ALBUMID, :NEW.TITLE, :NEW.ARTISTID);
END;
/
ALTER TRIGGER "CHINOOK"."AFTER_UPDATE_ALBUM" ENABLE;
--------------------------------------------------------
--  DDL for Procedure AFTER1968
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CHINOOK"."AFTER1968" (S OUT SYS_REFCURSOR)
IS
BEGIN
OPEN S FOR 
SELECT EMPLOYEEID, LASTNAME, FIRSTNAME, BIRTHDATE 
FROM EMPLOYEE WHERE BIRTHDATE > '31-DEC-68';
END;

/
--------------------------------------------------------
--  DDL for Procedure DELETE_INVOICE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CHINOOK"."DELETE_INVOICE" (INVOICE_ID IN NUMBER)
IS
ID_EXIST INTEGER;
BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
SELECT COUNT(INVOICEID) INTO ID_EXIST FROM INVOICE 
WHERE INVOICEID = INVOICE_ID;
IF ID_EXIST > 0 THEN
   DELETE FROM INVOICE WHERE INVOICEID = INVOICE_ID;
END IF;
COMMIT;
EXCEPTION
WHEN OTHERS THEN
ROLLBACK;
END;

/
--------------------------------------------------------
--  DDL for Procedure FIND_MANAGER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CHINOOK"."FIND_MANAGER" (EM_ID IN NUMBER)
IS
MANAGER_FN VARCHAR2(100);
MANAGER_LN VARCHAR2(100);
EM_FN VARCHAR2(100);
EM_LN VARCHAR2(100);
BEGIN
SELECT FIRSTNAME, LASTNAME 
INTO MANAGER_FN, MANAGER_LN
FROM EMPLOYEE
WHERE EMPLOYEEID = 
    (SELECT REPORTSTO
    FROM EMPLOYEE 
    WHERE EMPLOYEEID = EM_ID);
SELECT FIRSTNAME, LASTNAME
INTO EM_FN, EM_LN
FROM EMPLOYEE
WHERE EMPLOYEEID = EM_ID;
DBMS_OUTPUT.PUT_LINE(MANAGER_FN || ' ' || MANAGER_LN 
|| ' IS THE MANAGER OF ' || EM_FN || ' ' || EM_LN);
END;

/
--------------------------------------------------------
--  DDL for Procedure FIRST_AND_LAST
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CHINOOK"."FIRST_AND_LAST" (S OUT SYS_REFCURSOR)
IS BEGIN 
OPEN S FOR 
SELECT FIRSTNAME, LASTNAME FROM EMPLOYEE;
END;

/
--------------------------------------------------------
--  DDL for Procedure GET_NAME_COMPANY
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CHINOOK"."GET_NAME_COMPANY" (CUSTOMER_ID IN NUMBER)
IS 
F_NAME VARCHAR2(100);
L_NAME VARCHAR2(100);
COMP_NAME VARCHAR2(100);
BEGIN
SELECT FIRSTNAME, LASTNAME, COMPANY
INTO F_NAME, L_NAME, COMP_NAME
FROM CUSTOMER
WHERE CUSTOMERID = CUSTOMER_ID;
DBMS_OUTPUT.PUT_LINE(COMP_NAME || ' IS THE COMPANY FOR ' 
|| F_NAME || ' ' || L_NAME);
END;

/
--------------------------------------------------------
--  DDL for Procedure INSERT_CUSTOMER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CHINOOK"."INSERT_CUSTOMER" 
(CUST_ID IN NUMBER, F_NAME IN VARCHAR2, L_NAME IN VARCHAR2, NEW_EMAIL IN VARCHAR2)
IS
ID_EXIST INTEGER;
BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
SELECT COUNT(CUSTOMERID) INTO ID_EXIST
FROM CUSTOMER
WHERE CUSTOMERID = CUST_ID;
DBMS_OUTPUT.PUT_LINE(ID_EXIST);
IF ID_EXIST = 0 THEN
    INSERT INTO CUSTOMER(CUSTOMERID, FIRSTNAME, LASTNAME, EMAIL)
    VALUES (CUST_ID, F_NAME, L_NAME, NEW_EMAIL);
    DBMS_OUTPUT.PUT_LINE('INSERT COMPLETED');
ELSE
    DBMS_OUTPUT.PUT_LINE('CUSTOMER WITH THAT SPECIFIC ID ALREADY EXISTS');
END IF;
COMMIT;
EXCEPTION
WHEN OTHERS THEN 
DBMS_OUTPUT.PUT_LINE('FAILED TO INSERT NEW CUSTOMER');
ROLLBACK;
END;

/
--------------------------------------------------------
--  DDL for Procedure UPDATE_DATE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CHINOOK"."UPDATE_DATE" 
(EM_ID IN NUMBER, WHICH_DATE IN VARCHAR2, NEW_DATE IN DATE)
IS 
ID_EXISTS INTEGER;
BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
SELECT COUNT(EM.EMPLOYEEID) INTO ID_EXISTS FROM EMPLOYEE EM
WHERE EM.EMPLOYEEID = EM_ID;
DBMS_OUTPUT.PUT_LINE(ID_EXISTS);
IF ID_EXISTS > 0 THEN
    IF WHICH_DATE = 'HIREDATE' THEN
      UPDATE EMPLOYEE 
      SET HIREDATE = NEW_DATE
      WHERE EMPLOYEEID = EM_ID;
      DBMS_OUTPUT.PUT_LINE('EMPLOYEE ' || EM_ID 
      || ' HAS NEW HIREDATE OF ' || NEW_DATE);
    ELSIF WHICH_DATE = 'BIRTHDATE' THEN
      UPDATE EMPLOYEE 
      SET BIRTHDATE = NEW_DATE
      WHERE EMPLOYEEID = EM_ID;
      DBMS_OUTPUT.PUT_LINE('EMPLOYEE ' || EM_ID 
      || ' HAS NEW BIRTHDATE OF ' || NEW_DATE);  
    END IF;
ELSE 
  DBMS_OUTPUT.PUT_LINE('EMPLOYEEID DOES NOT EXIST');
END IF;
COMMIT;
EXCEPTION
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('FAILED TO UPDATE');
ROLLBACK;
END; 

/
--------------------------------------------------------
--  DDL for Procedure UPDATE_INFO
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CHINOOK"."UPDATE_INFO" (EM_ID IN NUMBER, INFO_NAME IN VARCHAR2, 
NEW_INFO IN VARCHAR2)
IS 
ID_EXISTS INTEGER;
BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
SELECT COUNT(EM.EMPLOYEEID) INTO ID_EXISTS FROM EMPLOYEE EM
WHERE EM.EMPLOYEEID = EM_ID;
DBMS_OUTPUT.PUT_LINE(ID_EXISTS);
IF ID_EXISTS > 0 THEN
    IF INFO_NAME = 'LASTNAME' THEN
        UPDATE EMPLOYEE
        SET LASTNAME = NEW_INFO
        WHERE EMPLOYEEID = EM_ID;
        DBMS_OUTPUT.PUT_LINE('EMPLOYEE ' || EM_ID || ' HAD HIS/HER ' 
        || INFO_NAME || ' UPDATED TO ' || NEW_INFO);
    ELSIF INFO_NAME = 'FIRSTNAME' THEN
        UPDATE EMPLOYEE
        SET FIRSTNAME = NEW_INFO
        WHERE EMPLOYEEID = EM_ID;
        DBMS_OUTPUT.PUT_LINE('EMPLOYEE ' || EM_ID || ' HAD HIS/HER ' 
        || INFO_NAME || ' UPDATED TO ' || NEW_INFO);
    ELSIF INFO_NAME = 'TITLE' THEN
        UPDATE EMPLOYEE
        SET TITLE = NEW_INFO
        WHERE EMPLOYEEID = EM_ID;
        DBMS_OUTPUT.PUT_LINE('EMPLOYEE ' || EM_ID || ' HAD HIS/HER ' 
        || INFO_NAME || ' UPDATED TO ' || NEW_INFO);
    ELSIF INFO_NAME = 'ADDRESS' THEN
        UPDATE EMPLOYEE
        SET ADDRESS = NEW_INFO
        WHERE EMPLOYEEID = EM_ID;
        DBMS_OUTPUT.PUT_LINE('EMPLOYEE ' || EM_ID || ' HAD HIS/HER ' 
        || INFO_NAME || ' UPDATED TO ' || NEW_INFO);
    ELSIF INFO_NAME = 'CITY' THEN
        UPDATE EMPLOYEE
        SET CITY = NEW_INFO
        WHERE EMPLOYEEID = EM_ID;
        DBMS_OUTPUT.PUT_LINE('EMPLOYEE ' || EM_ID || ' HAD HIS/HER ' 
        || INFO_NAME || ' UPDATED TO ' || NEW_INFO);
    ELSIF INFO_NAME = 'STATE' THEN
        UPDATE EMPLOYEE
        SET STATE = NEW_INFO
        WHERE EMPLOYEEID = EM_ID;
        DBMS_OUTPUT.PUT_LINE('EMPLOYEE ' || EM_ID || ' HAD HIS/HER ' 
        || INFO_NAME || ' UPDATED TO ' || NEW_INFO);
    ELSIF INFO_NAME = 'COUNTRY' THEN
        UPDATE EMPLOYEE
        SET COUNTRY = NEW_INFO
        WHERE EMPLOYEEID = EM_ID;
        DBMS_OUTPUT.PUT_LINE('EMPLOYEE ' || EM_ID || ' HAD HIS/HER ' 
        || INFO_NAME || ' UPDATED TO ' || NEW_INFO);
    ELSIF INFO_NAME = 'POSTALCODE' THEN
        UPDATE EMPLOYEE
        SET POSTALCODE = NEW_INFO
        WHERE EMPLOYEEID = EM_ID;
        DBMS_OUTPUT.PUT_LINE('EMPLOYEE ' || EM_ID || ' HAD HIS/HER ' 
        || INFO_NAME || ' UPDATED TO ' || NEW_INFO);
    ELSIF INFO_NAME = 'ADDRESS' THEN
        UPDATE EMPLOYEE
        SET ADDRESS = NEW_INFO
        WHERE EMPLOYEEID = EM_ID;
        DBMS_OUTPUT.PUT_LINE('EMPLOYEE ' || EM_ID || ' HAD HIS/HER ' 
        || INFO_NAME || ' UPDATED TO ' || NEW_INFO);
    ELSIF INFO_NAME = 'PHONE' THEN
        UPDATE EMPLOYEE
        SET PHONE = NEW_INFO
        WHERE EMPLOYEEID = EM_ID;
        DBMS_OUTPUT.PUT_LINE('EMPLOYEE ' || EM_ID || ' HAD HIS/HER ' 
        || INFO_NAME || ' UPDATED TO ' || NEW_INFO);
    ELSIF INFO_NAME = 'FAX' THEN
        UPDATE EMPLOYEE
        SET FAX = NEW_INFO
        WHERE EMPLOYEEID = EM_ID;
        DBMS_OUTPUT.PUT_LINE('EMPLOYEE ' || EM_ID || ' HAD HIS/HER ' 
        || INFO_NAME || ' UPDATED TO ' || NEW_INFO);
    ELSIF INFO_NAME = 'EMAIL' THEN
        UPDATE EMPLOYEE
        SET EMAIL = NEW_INFO
        WHERE EMPLOYEEID = EM_ID;
        DBMS_OUTPUT.PUT_LINE('EMPLOYEE ' || EM_ID || ' HAD HIS/HER ' 
        || INFO_NAME || ' UPDATED TO ' || NEW_INFO);
    END IF;
ELSE 
  DBMS_OUTPUT.PUT_LINE('EMPLOYEEID DOES NOT EXIST');
END IF;
COMMIT;
EXCEPTION
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('FAILED TO UPDATE');
ROLLBACK;
END;

/
--------------------------------------------------------
--  DDL for Procedure UPDATE_NAME
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CHINOOK"."UPDATE_NAME" 
(EM_ID IN INTEGER, INFO_NAME IN VARCHAR2, NEW_INFO IN VARCHAR2)
IS
ID_EXIST INTEGER;
BEGIN
SELECT COUNT(EMPLOYEEID) INTO ID_EXIST 
FROM EMPLOYEE WHERE EMPLOYEEID = EM_ID;
IF ID_EXIST > 0 THEN
IF INFO_NAME = LASTNAME THEN
    UPDATE EMPLOYEE
    SET LASTNAME = NEW_INFO
    WHERE EMPLOYEEID = EM_ID;
    DBMS_OUTPUT.PUT_LINE('EMPLOYEE ' || EM_ID || ' HAD HIS/HER ' 
    || INFO_NAME || ' UPDATED TO ' || NEW_INFO);
ELSE IF INFO_NAME = FIRSTNAME THEN
    UPDATE EMPLOYEE
    SET FIRSTNAME = NEW_INFO
    WHERE EMPLOYEEID = EM_ID;
    DBMS_OUTPUT.PUT_LINE('EMPLOYEE ' || EM_ID || ' HAD HIS/HER ' 
    || INFO_NAME || ' UPDATED TO ' || NEW_INFO);
ELSE IF INFO_NAME = TITLE THEN
    UPDATE EMPLOYEE
    SET TITLE = NEW_INFO
    WHERE EMPLOYEEID = EM_ID;
    DBMS_OUTPUT.PUT_LINE('EMPLOYEE ' || EM_ID || ' HAD HIS/HER ' 
    || INFO_NAME || ' UPDATED TO ' || NEW_INFO);
ELSE IF INFO_NAME = ADDRESS THEN
    UPDATE EMPLOYEE
    SET ADDRESS = NEW_INFO
    WHERE EMPLOYEEID = EM_ID;
    DBMS_OUTPUT.PUT_LINE('EMPLOYEE ' || EM_ID || ' HAD HIS/HER ' 
    || INFO_NAME || ' UPDATED TO ' || NEW_INFO);
ELSE IF INFO_NAME = CITY THEN
    UPDATE EMPLOYEE
    SET CITY = NEW_INFO
    WHERE EMPLOYEEID = EM_ID;
    DBMS_OUTPUT.PUT_LINE('EMPLOYEE ' || EM_ID || ' HAD HIS/HER ' 
    || INFO_NAME || ' UPDATED TO ' || NEW_INFO);
ELSE IF INFO_NAME = STATE THEN
    UPDATE EMPLOYEE
    SET STATE = NEW_INFO
    WHERE EMPLOYEEID = EM_ID;
    DBMS_OUTPUT.PUT_LINE('EMPLOYEE ' || EM_ID || ' HAD HIS/HER ' 
    || INFO_NAME || ' UPDATED TO ' || NEW_INFO);
ELSE IF INFO_NAME = COUNTRY THEN
    UPDATE EMPLOYEE
    SET COUNTRY = NEW_INFO
    WHERE EMPLOYEEID = EM_ID;
    DBMS_OUTPUT.PUT_LINE('EMPLOYEE ' || EM_ID || ' HAD HIS/HER ' 
    || INFO_NAME || ' UPDATED TO ' || NEW_INFO);
ELSE IF INFO_NAME = POSTALCODE THEN
    UPDATE EMPLOYEE
    SET POSTALCODE = NEW_INFO
    WHERE EMPLOYEEID = EM_ID;
    DBMS_OUTPUT.PUT_LINE('EMPLOYEE ' || EM_ID || ' HAD HIS/HER ' 
    || INFO_NAME || ' UPDATED TO ' || NEW_INFO);
ELSE IF INFO_NAME = ADDRESS THEN
    UPDATE EMPLOYEE
    SET ADDRESS = NEW_INFO
    WHERE EMPLOYEEID = EM_ID;
    DBMS_OUTPUT.PUT_LINE('EMPLOYEE ' || EM_ID || ' HAD HIS/HER ' 
    || INFO_NAME || ' UPDATED TO ' || NEW_INFO);
ELSE IF INFO_NAME = PHONE THEN
    UPDATE EMPLOYEE
    SET PHONE = NEW_INFO
    WHERE EMPLOYEEID = EM_ID;
    DBMS_OUTPUT.PUT_LINE('EMPLOYEE ' || EM_ID || ' HAD HIS/HER ' 
    || INFO_NAME || ' UPDATED TO ' || NEW_INFO);
ELSE IF INFO_NAME = FAX THEN
    UPDATE EMPLOYEE
    SET FAX = NEW_INFO
    WHERE EMPLOYEEID = EM_ID;
    DBMS_OUTPUT.PUT_LINE('EMPLOYEE ' || EM_ID || ' HAD HIS/HER ' 
    || INFO_NAME || ' UPDATED TO ' || NEW_INFO);
ELSE IF INFO_NAME = EMAIL THEN
    UPDATE EMPLOYEE
    SET EMAIL = NEW_INFO
    WHERE EMPLOYEEID = EM_ID;
    DBMS_OUTPUT.PUT_LINE('EMPLOYEE ' || EM_ID || ' HAD HIS/HER ' 
    || INFO_NAME || ' UPDATED TO ' || NEW_INFO);
END IF;
END IF;
END;

/
--------------------------------------------------------
--  DDL for Procedure UPDATE_REPORTSTO
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CHINOOK"."UPDATE_REPORTSTO" 
(EM_ID IN NUMBER, REPORTSTO_ID IN NUMBER)
IS 
ID_EXISTS INTEGER;
BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
SELECT COUNT(EM.EMPLOYEEID) INTO ID_EXISTS FROM EMPLOYEE EM
WHERE EM.EMPLOYEEID = EM_ID;
DBMS_OUTPUT.PUT_LINE(ID_EXISTS);
IF ID_EXISTS > 0 THEN
  UPDATE EMPLOYEE 
  SET REPORTSTO = REPORTSTO_ID
  WHERE EMPLOYEEID = EM_ID;
  DBMS_OUTPUT.PUT_LINE('EMPLOYEE ' || EM_ID 
  || ' NOW REPORTS TO ' || REPORTSTO_ID);
ELSE 
  DBMS_OUTPUT.PUT_LINE('EMPLOYEEID DOES NOT EXIST');
END IF;
COMMIT;
EXCEPTION
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('FAILED TO UPDATE');
ROLLBACK;
END;  

/
--------------------------------------------------------
--  DDL for Function AFTER_1968
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "CHINOOK"."AFTER_1968" (S OUT SYS_REFCURSOR)
IS 
BEGIN
OPEN S FOR 
SELECT * FROM EMPLOYEE WHERE BIRTHDATE > '31-DEC-68';
END;

/
--------------------------------------------------------
--  DDL for Function AFTER_YR1968
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "CHINOOK"."AFTER_YR1968" 
RETURN VARCHAR2
AS 
CURSOR C1 IS 
SELECT EMPLOYEEID, LASTNAME, FIRSTNAME, BIRTHDATE 
FROM EMPLOYEE WHERE BIRTHDATE > '31-DEC-68';
R_C1 C1%ROWTYPE;
NUM NUMBER := 0;
EMP_ID EMPLOYEE.EMPLOYEEID%TYPE;
EMP_LAST EMPLOYEE.LASTNAME%TYPE;
EMP_FIRST EMPLOYEE.FIRSTNAME%TYPE;
EMP_BD EMPLOYEE.BIRTHDATE%TYPE;
BEGIN
OPEN C1;
LOOP
    FETCH C1 INTO R_C1;
    EXIT WHEN C1%NOTFOUND;
    IF R_C1.EMPLOYEEID > NUM THEN
        EMP_ID := R_C1.EMPLOYEEID;
        EMP_LAST := R_C1.LASTNAME;
        EMP_FIRST := R_C1.FIRSTNAME;
        EMP_BD := R_C1.BIRTHDATE;
    END IF;
END LOOP;
CLOSE C1;
RETURN C1;
END;

/
--------------------------------------------------------
--  DDL for Function AVG_PRICE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "CHINOOK"."AVG_PRICE" 
RETURN NUMBER
IS
Z NUMBER;
BEGIN
    SELECT SUM(UNITPRICE)/COUNT(QUANTITY) INTO Z
    FROM INVOICELINE;
    RETURN Z;
END;

/
--------------------------------------------------------
--  DDL for Function BD_AFTER1968
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "CHINOOK"."BD_AFTER1968" 
RETURN SYS_REFCURSOR
AS
C1 SYS_REFCURSOR;
BEGIN
OPEN C1 FOR 
SELECT EMPLOYEEID, LASTNAME, FIRSTNAME, BIRTHDATE 
FROM EMPLOYEE WHERE BIRTHDATE > '31-DEC-68';
RETURN C1;
END BD_AFTER1968;

/
--------------------------------------------------------
--  DDL for Function GET_TIME
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "CHINOOK"."GET_TIME" 
RETURN NUMBER
IS
Z NUMBER;
BEGIN 
    Z := time;
    RETURN Z;
END;

/
--------------------------------------------------------
--  DDL for Function LENGTH_NAME
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "CHINOOK"."LENGTH_NAME" (M_ID IN NUMBER)
RETURN NUMBER 
IS
Z NUMBER;
BEGIN
    Z := (SELECT M.NAME 
    FROM MEDIATYPE M 
    WHERE MEDIATYPEID = M_ID);
    RETURN Z;
END;

/
--------------------------------------------------------
--  Constraints for Table GENRE
--------------------------------------------------------

  ALTER TABLE "CHINOOK"."GENRE" ADD CONSTRAINT "PK_GENRE" PRIMARY KEY ("GENREID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "CHINOOK"."GENRE" MODIFY ("GENREID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table ALBUM
--------------------------------------------------------

  ALTER TABLE "CHINOOK"."ALBUM" ADD CONSTRAINT "PK_ALBUM" PRIMARY KEY ("ALBUMID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "CHINOOK"."ALBUM" MODIFY ("ARTISTID" NOT NULL ENABLE);
  ALTER TABLE "CHINOOK"."ALBUM" MODIFY ("TITLE" NOT NULL ENABLE);
  ALTER TABLE "CHINOOK"."ALBUM" MODIFY ("ALBUMID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table EMPLOYEE
--------------------------------------------------------

  ALTER TABLE "CHINOOK"."EMPLOYEE" ADD CONSTRAINT "PK_EMPLOYEE" PRIMARY KEY ("EMPLOYEEID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "CHINOOK"."EMPLOYEE" MODIFY ("FIRSTNAME" NOT NULL ENABLE);
  ALTER TABLE "CHINOOK"."EMPLOYEE" MODIFY ("LASTNAME" NOT NULL ENABLE);
  ALTER TABLE "CHINOOK"."EMPLOYEE" MODIFY ("EMPLOYEEID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table ARTIST
--------------------------------------------------------

  ALTER TABLE "CHINOOK"."ARTIST" ADD CONSTRAINT "PK_ARTIST" PRIMARY KEY ("ARTISTID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "CHINOOK"."ARTIST" MODIFY ("ARTISTID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table PLAYLIST
--------------------------------------------------------

  ALTER TABLE "CHINOOK"."PLAYLIST" ADD CONSTRAINT "PK_PLAYLIST" PRIMARY KEY ("PLAYLISTID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "CHINOOK"."PLAYLIST" MODIFY ("PLAYLISTID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table INVOICELINE
--------------------------------------------------------

  ALTER TABLE "CHINOOK"."INVOICELINE" ADD CONSTRAINT "PK_INVOICELINE" PRIMARY KEY ("INVOICELINEID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "CHINOOK"."INVOICELINE" MODIFY ("QUANTITY" NOT NULL ENABLE);
  ALTER TABLE "CHINOOK"."INVOICELINE" MODIFY ("UNITPRICE" NOT NULL ENABLE);
  ALTER TABLE "CHINOOK"."INVOICELINE" MODIFY ("TRACKID" NOT NULL ENABLE);
  ALTER TABLE "CHINOOK"."INVOICELINE" MODIFY ("INVOICEID" NOT NULL ENABLE);
  ALTER TABLE "CHINOOK"."INVOICELINE" MODIFY ("INVOICELINEID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TRACK
--------------------------------------------------------

  ALTER TABLE "CHINOOK"."TRACK" ADD CONSTRAINT "PK_TRACK" PRIMARY KEY ("TRACKID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "CHINOOK"."TRACK" MODIFY ("UNITPRICE" NOT NULL ENABLE);
  ALTER TABLE "CHINOOK"."TRACK" MODIFY ("MILLISECONDS" NOT NULL ENABLE);
  ALTER TABLE "CHINOOK"."TRACK" MODIFY ("MEDIATYPEID" NOT NULL ENABLE);
  ALTER TABLE "CHINOOK"."TRACK" MODIFY ("NAME" NOT NULL ENABLE);
  ALTER TABLE "CHINOOK"."TRACK" MODIFY ("TRACKID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table INVOICE
--------------------------------------------------------

  ALTER TABLE "CHINOOK"."INVOICE" ADD CONSTRAINT "PK_INVOICE" PRIMARY KEY ("INVOICEID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "CHINOOK"."INVOICE" MODIFY ("TOTAL" NOT NULL ENABLE);
  ALTER TABLE "CHINOOK"."INVOICE" MODIFY ("INVOICEDATE" NOT NULL ENABLE);
  ALTER TABLE "CHINOOK"."INVOICE" MODIFY ("CUSTOMERID" NOT NULL ENABLE);
  ALTER TABLE "CHINOOK"."INVOICE" MODIFY ("INVOICEID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table CUSTOMER
--------------------------------------------------------

  ALTER TABLE "CHINOOK"."CUSTOMER" ADD CONSTRAINT "PK_CUSTOMER" PRIMARY KEY ("CUSTOMERID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "CHINOOK"."CUSTOMER" MODIFY ("EMAIL" NOT NULL ENABLE);
  ALTER TABLE "CHINOOK"."CUSTOMER" MODIFY ("LASTNAME" NOT NULL ENABLE);
  ALTER TABLE "CHINOOK"."CUSTOMER" MODIFY ("FIRSTNAME" NOT NULL ENABLE);
  ALTER TABLE "CHINOOK"."CUSTOMER" MODIFY ("CUSTOMERID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table MEDIATYPE
--------------------------------------------------------

  ALTER TABLE "CHINOOK"."MEDIATYPE" ADD CONSTRAINT "PK_MEDIATYPE" PRIMARY KEY ("MEDIATYPEID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "CHINOOK"."MEDIATYPE" MODIFY ("MEDIATYPEID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table PLAYLISTTRACK
--------------------------------------------------------

  ALTER TABLE "CHINOOK"."PLAYLISTTRACK" ADD CONSTRAINT "PK_PLAYLISTTRACK" PRIMARY KEY ("PLAYLISTID", "TRACKID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "CHINOOK"."PLAYLISTTRACK" MODIFY ("TRACKID" NOT NULL ENABLE);
  ALTER TABLE "CHINOOK"."PLAYLISTTRACK" MODIFY ("PLAYLISTID" NOT NULL ENABLE);
--------------------------------------------------------
--  Ref Constraints for Table ALBUM
--------------------------------------------------------

  ALTER TABLE "CHINOOK"."ALBUM" ADD CONSTRAINT "FK_ALBUMARTISTID" FOREIGN KEY ("ARTISTID")
	  REFERENCES "CHINOOK"."ARTIST" ("ARTISTID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table CUSTOMER
--------------------------------------------------------

  ALTER TABLE "CHINOOK"."CUSTOMER" ADD CONSTRAINT "FK_CUSTOMERSUPPORTREPID" FOREIGN KEY ("SUPPORTREPID")
	  REFERENCES "CHINOOK"."EMPLOYEE" ("EMPLOYEEID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table EMPLOYEE
--------------------------------------------------------

  ALTER TABLE "CHINOOK"."EMPLOYEE" ADD CONSTRAINT "FK_EMPLOYEEREPORTSTO" FOREIGN KEY ("REPORTSTO")
	  REFERENCES "CHINOOK"."EMPLOYEE" ("EMPLOYEEID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table INVOICELINE
--------------------------------------------------------

  ALTER TABLE "CHINOOK"."INVOICELINE" ADD CONSTRAINT "FK_INVOICELINETRACKID" FOREIGN KEY ("TRACKID")
	  REFERENCES "CHINOOK"."TRACK" ("TRACKID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table PLAYLISTTRACK
--------------------------------------------------------

  ALTER TABLE "CHINOOK"."PLAYLISTTRACK" ADD CONSTRAINT "FK_PLAYLISTTRACKPLAYLISTID" FOREIGN KEY ("PLAYLISTID")
	  REFERENCES "CHINOOK"."PLAYLIST" ("PLAYLISTID") ENABLE;
  ALTER TABLE "CHINOOK"."PLAYLISTTRACK" ADD CONSTRAINT "FK_PLAYLISTTRACKTRACKID" FOREIGN KEY ("TRACKID")
	  REFERENCES "CHINOOK"."TRACK" ("TRACKID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table TRACK
--------------------------------------------------------

  ALTER TABLE "CHINOOK"."TRACK" ADD CONSTRAINT "FK_TRACKALBUMID" FOREIGN KEY ("ALBUMID")
	  REFERENCES "CHINOOK"."ALBUM" ("ALBUMID") ENABLE;
  ALTER TABLE "CHINOOK"."TRACK" ADD CONSTRAINT "FK_TRACKGENREID" FOREIGN KEY ("GENREID")
	  REFERENCES "CHINOOK"."GENRE" ("GENREID") ENABLE;
  ALTER TABLE "CHINOOK"."TRACK" ADD CONSTRAINT "FK_TRACKMEDIATYPEID" FOREIGN KEY ("MEDIATYPEID")
	  REFERENCES "CHINOOK"."MEDIATYPE" ("MEDIATYPEID") ENABLE;
