-- CREATE TABLES USERS, USER_TYPE,  BANK_ACCOUNT AND TRANSACTION
DROP TABLE USERS;
-- CREATE TABLE THAT TAKES MORE THAN ONE

CREATE TABLE USERS(
USER_ID NUMBER PRIMARY KEY, 
USER_TYPE_ID NUMBER NOT NULL,
USERNAME VARCHAR2(40) UNIQUE NOT NULL,
USER_PASSWORD VARCHAR2(50) NOT NULL
); 

CREATE TABLE USER_TYPE(
USER_TYPE_ID NUMBER PRIMARY KEY, 
USER_TYPE VARCHAR(50) NOT NULL 
);

DROP TABLE BANK_ACCOUNT;

CREATE TABLE BANK_ACCOUNT(
BANK_ACCOUNT_ID NUMBER PRIMARY KEY, 
BANK_ACCOUNT_TYPE VARCHAR2(100),
BANK_ACCOUNT_NUMBER NUMBER UNIQUE,
BANK_ACCOUNT_SATUS VARCHAR2(40),
BALANCE NUMBER (10,2), 
USER_ID NUMBER
);

DROP TABLE TRANSACTIONS CASCADE CONSTRAINTS;

CREATE TABLE TRANSACTIONS(
TRANSACTION_ID NUMBER PRIMARY KEY,
TRANSACTION_TYPE VARCHAR2(100),
ACCOUNT_TYPE VARCHAR(100),
TRANSACTION_AMOUNT NUMBER,
BANK_ACCOUNT_ID NUMBER,
TRANSACTION_DATE DATE
);

ALTER SESSION SET TIME_ZONE ='+6:0';
ALTER SESSION SET NLS_DATE_FORMAT = 'DD-MON-YYYY HH24:MI:SS';


-- ADD FOREIGN KEY CONSTRAINT

ALTER TABLE USERS
ADD CONSTRAINT FK_USER_TYPE
FOREIGN KEY (USER_TYPE_ID) REFERENCES USER_TYPE(USER_TYPE_ID);

ALTER TABLE BANK_ACCOUNT 
ADD CONSTRAINT FK_BANK_ACCOUNT_USER
FOREIGN KEY(USER_ID) REFERENCES USERS(USER_ID);

ALTER TABLE TRANSACTIONS 
ADD CONSTRAINT FK_TRANS_BANK_ACCOUNTS
FOREIGN KEY (BANK_ACCOUNT_ID) REFERENCES BANK_ACCOUNT(BANK_ACCOUNT_ID);

-- CREATE  sequences to generate USER_ID and BANK_ACCOUNT_ID. 

CREATE SEQUENCE SEQ_PK_USERS
START WITH 100
INCREMENT BY 3;

CREATE SEQUENCE SEQ_PK_BANK_ACC
START WITH 1000
INCREMENT BY 3;

--ADDITIONAL SEQUENCE FOR TRANSACTION TABLE 
CREATE SEQUENCE SQ_PK_TRANSACTION 
START WITH 1000
INCREMENT BY 6;

-- CREATE BEFORE INSERT TRIGGER
CREATE OR REPLACE TRIGGER TRIG_INSERT_USERS
BEFORE INSERT ON USERS
FOR EACH ROW
BEGIN 
    SELECT SEQ_PK_USERS.NEXTVAL INTO :NEW.USER_ID FROM DUAL;
END;


CREATE OR REPLACE TRIGGER TRIG_INSERT_BACC
BEFORE INSERT ON BANK_ACCOUNT
FOR EACH ROW 
BEGIN
    SELECT SEQ_PK_BANK_ACC.NEXTVAL INTO :NEW.BANK_ACCOUNT_ID FROM DUAL;
END;

CREATE OR REPLACE TRIGGER TRIG_INSERT_TRANSACTIONS
BEFORE INSERT ON TRANSACTIONS
FOR EACH ROW 
BEGIN
    SELECT SQ_PK_TRANSACTION.NEXTVAL INTO :NEW.TRANSACTION_ID FROM DUAL;
END;

-- INSERT DATA INTO TABLES  
INSERT INTO USER_TYPE(USER_TYPE_ID, USER_TYPE)
VALUES(1, ' SUPERUSER'); 

INSERT INTO USER_TYPE(USER_TYPE_ID, USER_TYPE)
VALUES(2, ' REGISTERED USER'); 

INSERT INTO USER_TYPE(USER_TYPE_ID, USER_TYPE)
VALUES(3, ' REGISTER USER');

SELECT * FROM USER_TYPE;

-- INSERT DATA INTO USERS TABLE 
INSERT INTO USERS(USER_ID, USER_TYPE_ID, USERNAME, USER_PASSWORD)
VALUES(1, 1, 'admin', 'KaileyChristina');

INSERT INTO USERS(USER_ID, USER_TYPE_ID, USERNAME, USER_PASSWORD)
VALUES(2, 2, 'Jenn23', 'lol90');

INSERT INTO USERS(USER_ID, USER_TYPE_ID, USERNAME, USER_PASSWORD)
VALUES(3, 3, 'chris45', 'happy45');

SELECT * FROM USERS;

-- INSERT DATA INTO BANK_ACCOUNT

INSERT INTO BANK_ACCOUNT(BANK_ACCOUNT_ID, BANK_ACCOUNT_NUMBER, BANK_ACCOUNT_SATUS, BANK_ACCOUNT_TYPE, BALANCE, USER_ID)
VALUES(1, 0000896785, ' OPEN', ' SAVING', 300092, 106);

INSERT INTO BANK_ACCOUNT(BANK_ACCOUNT_ID, BANK_ACCOUNT_NUMBER, BANK_ACCOUNT_SATUS, BANK_ACCOUNT_TYPE, BALANCE, USER_ID)
VALUES(2, 0000896654, ' CLOSED', ' CHECKING', 0, 109);

INSERT INTO BANK_ACCOUNT(BANK_ACCOUNT_ID, BANK_ACCOUNT_NUMBER, BANK_ACCOUNT_SATUS, BANK_ACCOUNT_TYPE, BALANCE, USER_ID)
VALUES(3, 0000896685, ' OPEN', ' SAVING', 3600092, 106);

SELECT * FROM BANK_ACCOUNT;



-- CREATE PROCEDURE TO DEPOSIT MONEY 
CREATE OR REPLACE PROCEDURE DEPOSSITE_PROCEDURE(
DEPOSIT_AMOUNT IN NUMBER, 
INTO_BANK_ACCOUNT_NUM IN NUMBER
)
IS 
CURRENT_BALANCE BANK_ACCOUNT.BALANCE%TYPE;
BEGIN
    SELECT BALANCE INTO CURRENT_BALANCE
    FROM BANK_ACCOUNT WHERE BANK_ACCOUNT_NUMBER = INTO_BANK_ACCOUNT_NUM;
IF DEPOSIT_AMOUNT>0 -- RETURN POSSITIVE AMOUNT ONLY
 THEN
    UPDATE BANK_ACCOUNT
    SET BALANCE = CURRENT_BALANCE + DEPOSIT_AMOUNT
    WHERE BANK_ACCOUNT_NUMBER = INTO_BANK_ACCOUNT_NUM;
    DBMS_OUTPUT.PUT('BEPOSIT IS COMPLETED');
  COMMIT;
END IF;
 EXCEPTION WHEN OTHERS 
 THEN 
    ROLLBACK; -- IF ANY NUM-POSSITIVE NUMBER IS ENTERED 
END;

-- CREATE A PROCEDURE TO WITHDRAW MONEY FROM BANK_ACCOUNT
CREATE OR REPLACE PROCEDURE WITH_PROCEDURE_FROM(
FROM_BANK_ACC_NUM IN NUMBER, WITHDRAW_AMOUNT IN NUMBER
)
IS 
CURRENT_BALANCE BANK_ACCOUNT.BALANCE%TYPE;
BEGIN
    SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
    SELECT BALANCE INTO CURRENT_BALANCE FROM BANK_ACCOUNT
    WHERE BANK_ACCOUNT_NUMBER = FROM_BANK_ACC_NUM;
 IF CURRENT_BALANCE < WITHDRAW_AMOUNT
    THEN UPDATE BANK_ACCOUNT -- IF THE WITHDRAW AMOUNT SET CURRENT BALANCE TO NEGATIVE (OVERDRAWN)
     SET BALANCE = CURRENT_BALANCE - WITHDRAW_AMOUNT
    WHERE BANK_ACCOUNT_NUMBER = FROM_BANK_ACC_NUM;
  DBMS_OUTPUT.PUT_LINE('YOUR ACCOUNT IS OVERDRAWN');
 ELSE
     UPDATE BANK_ACCOUNT
     SET BALANCE = CURRENT_BALANCE - WITHDRAW_AMOUNT
      WHERE BANK_ACCOUNT_NUMBER = FROM_BANK_ACC_NUM;
 END IF;
 DBMS_OUTPUT.PUT_LINE('YOU HAVE SUCCESSFULLY WITHDRAWN MONEY FROM YOUR ACCOUNT');
 EXCEPTION 
  WHEN OTHERS 
  THEN 
   ROLLBACK;
   COMMIT;
END;

-- PROCEDURE TO REGISTER NEW USER 
CREATE OR REPLACE PROCEDURE REGISTER_NEW_USER(
USER_ID IN NUMBER, USER_NAME IN VARCHAR2, USER_PASSWORD IN VARCHAR2
)
IS 
US_NAME_EXIST NUMBER;
BEGIN
    SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
    SELECT COUNT(USERNAME) INTO US_NAME_EXIST FROM USERS;
    IF US_NAME_EXIST = 0 THEN 
    INSERT INTO USERS(USER_TYPE_ID, USERNAME, USER_PASSWORD)
    VALUES(USER_ID, USER_NAME, USER_PASSWORD);
    DBMS_OUTPUT.PUT_LINE('WELCOME NEW USER');
ELSE
    DBMS_OUTPUT.PUT_LINE('USERNAME IS NOT AVAILABLE');
    END IF; 
    COMMIT;
    EXCEPTION
    WHEN OTHERS THEN 
    DBMS_OUTPUT.PUT_LINE('FAILED TO REGISTERED');
    ROLLBACK;
END;

-- PROCEDURE FOR USER TO CREATE A NEW BANK ACCOUNT 
CREATE OR REPLACE PROCEDURE OPEN_NEW_BANK_ACC(
USER_ID IN NUMBER, BALANCE IN NUMBER)
IS 
BEGIN
    SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
    INSERT INTO BANK_ACCOUNT(USER_ID, BALANCE)
    VALUES(USER_ID, BALANCE);
    DBMS_OUTPUT.PUT_LINE('BANK ACCOUNT IS CREATED');
    COMMIT; 
    EXCEPTION
    WHEN OTHERS THEN 
    DBMS_OUTPUT.PUT_LINE('FAILED TO CREATE NEW BANK ACCOUNT');
    ROLLBACK;
END;

-- FUNCTION TO VIEW ALL ACCOUNT OF A USER
CREATE OR REPLACE FUNCTION VIEW_ACC(US_ID IN NUMBER)
RETURN SYS_REFCURSOR
AS
S_R  SYS_REFCURSOR;
BEGIN
    OPEN S_R FOR SELECT BANK_ACCOUNT_ID, BALANCE FROM BANK_ACCOUNT
    WHERE USER_ID = US_ID;
    RETURN S_R;
END;

-- PROCEDURE TO DELETE AN ACCOUNT
CREATE OR REPLACE PROCEDURE DELETE_BANK_ACCOUNT(B_ACC_ID IN NUMBER)
AS 
B_VALUE NUMBER; 
BEGIN
    SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
    SELECT BALANCE INTO B_VALUE FROM BANK_ACCOUNT
    WHERE BANK_ACCOUNT_ID = B_ACC_ID;
    IF B_VALUE = 0 THEN 
        DELETE FROM BANK_ACCOUNT WHERE BANK_ACCOUNT_ID = B_ACC_ID;
        DBMS_OUTPUT.PUT_LINE('ACCOUNT DELETED');
    ELSE 
        DBMS_OUTPUT.PUT_LINE('ACCOUNT IS NOT EMPTY ');
    END IF;
    COMMIT;
    EXCEPTION
    WHEN OTHERS THEN 
    DBMS_OUTPUT.PUT_LINE('FAILED TO DELETE ACCOUNT');
    ROLLBACK;
END;

-- PROCEDURE TO ADD NEW TRANSACTION HISTORY 

CREATE OR REPLACE PROCEDURE ADD_NEE_TRANSACTION(
B_ID IN NUMBER, TRANS IN VARCHAR)
IS 
BEGIN
    SET TRANSACTION ISOLATION LEVEL SERIALIZABLE; 
    INSERT INTO TRANSACTIONS (BANK_ACCOUNT_ID, TRANSACTION_TYPE, TRANSACTION_AMOUNT)
    VALUES(B_ID, TRANS); 
    DBMS_OUTPUT.PUT_LINE('NEW TRANSACTION HAS BEEN PROCESED');
    COMMIT; 
    EXCEPTION
    WHEN OTHER THEN 
    DBMS_OUTPUT.PUT_LINE('UNABLE TO ADD TRANSACTION'); 
    ROLLBACK;
END; 
--FUNCTION FOR USER TO VIEW TRANSACTION HISTORY

CREATE OR REPLACE FUNCTION VIEW_TRANSACTION_HISTORY(
ACC_ID IN NUMBER)
RETURN SYS_REFCURSOR
AS 
R_S SYS_REFCURSOR;
BEGIN
    OPEN R_S FOR SELECT TRANSACTION_ID, TRANSACTION_TYPE TRANSACTION_DATE FROM TRANSACTIONS 
    WHERE BANK_ACCOUNT_ID = ACC_ID
    ORDER BY TRANSACTION_DATE;
    RETURN R_S;
END; 



