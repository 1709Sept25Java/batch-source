
--Create a database with two tables:
--EMPLOYEE
--Columns: EMPLOYEE_ID, EMP_FIRSTNAME, EMP_LASTNAME, DEPARTMENT_ID, SALARY, EMP_EMAIL
--DEPARTMENT:
--Columns: DEPARTMENT_ID, DEPARTMENT_NAME

CREATE TABLE EMPLOYEE_2(
--_2 added to not mix up with current tables from previous assignment
EMPLOYEE_ID NUMBER,
EMP_FIRSTNAME VARCHAR2(20),
EMP_LASTNAME VARCHAR2(20),
DEPARTMENT_ID NUMBER,
SALARY NUMBER,
EMP_EMAIL VARCHAR2(50)
);

CREATE TABLE DEPARTMENT(
DEPARTMENT_ID NUMBER,
DEPARTMENT_NAME VARCHAR2(20)
)

--Create a sequence and trigger to auto-generate primary key values for both tables. 
CREATE SEQUENCE EMPLOYEE_ID_S
            START WITH 1
            INCREMENT BY 1;
            
CREATE OR REPLACE TRIGGER t
BEFORE 
    INSERT ON EMPLOYEE_2
    FOR EACH ROW
WHEN (EMPLOYEE_ID IS NULL) 
BEGIN
        DBMS_OUTPUT.PUT_LINE('Inserting into Employee')
        SELECT EMPLOYEE_ID_S 
            INTO: EMPLOYEE_ID FROM DUAL;
END;

CREATE SEQUENCE DEPT_ID_S
            START WITH 1
            INCREMENT BY 1;
            
CREATE OR REPLACE TRIGGER t2
BEFORE 
    INSERT ON DEPARTMENT
BEGIN
        DBMS_OUTPUT.PUT_LINE('Inserting into Department');
        SELECT DEPT_ID_S 
            INTO EMPLOYEE_ID FROM DUAL;
END;

--Insert at least six employees and three departments. 
INSERT INTO EMPLOYEE_2(EMP_FIRSTNAME,EMP_LASTNAME) VALUES ('EMP_1','EMP');
INSERT INTO EMPLOYEE_2(EMP_FIRSTNAME,EMP_LASTNAME) VALUES ('EMP_2','EMP');
INSERT INTO EMPLOYEE_2(EMP_FIRSTNAME,EMP_LASTNAME) VALUES ('EMP_3','EMP');
INSERT INTO EMPLOYEE_2(EMP_FIRSTNAME,EMP_LASTNAME) VALUES ('EMP_4','EMP');
INSERT INTO EMPLOYEE_2(EMP_FIRSTNAME,EMP_LASTNAME) VALUES ('EMP_5','EMP');
INSERT INTO EMPLOYEE_2(EMP_FIRSTNAME,EMP_LASTNAME) VALUES ('EMP_6','EMP');

INSERT INTO DEPARTMENT (DEPARTMENT_NAME) VALUES ('DEPARTMENT_1');
INSERT INTO DEPARTMENT (DEPARTMENT_NAME) VALUES ('DEPARTMENT_2');
INSERT INTO DEPARTMENT (DEPARTMENT_NAME) VALUES ('DEPARTMENT_3');
/*
Create a stored procedure SP_GIVE_RAISE which takes in a DEPARTMENT_ID and increases each 
employee's salary within the department by 10%, and returns the new average salary for the 
department, as well as a boolean value indicating whether the ID entered corresponds to a valid
department. 
*/
CREATE OR REPLACE FUNCTION SP_GIVE_RAISE(DEPARTMENT_ID IN NUMBER)
RETURN NUMBER
AS
    A_SALARY NUMBER;
    SALARY_P NUMBER;
    get_EMP SYS_REFCURSOR;
BEGIN
    OPEN get_EMP for SELECT SALARY FROM EMPLOYEE where EMPLOYEE=DEPARTMENT_ID;
    IF get_EMP>0 then
        SALARY_P:=get_EMP*0.10;
        A_SALARY:=get_EMP+SALARY_P;
    END IF;
    RETURN A_SALARY;    
END;
