CREATE TABLE DEPARTMENT(
    DEPARTMENT_ID INTEGER PRIMARY KEY,
    DEPARTMENT_NAME VARCHAR2(100)
);

CREATE TABLE EMPLOYEE(
    EMPLOYEE_ID INTEGER PRIMARY KEY,
    EMP_FIRSTNAME VARCHAR2(100),
    EMP_LASTNAME VARCHAR2(100),
    DEPARTMENT_ID INTEGER,
    SALARY NUMBER(10,2),
    EMP_EMAIL VARCHAR2(100),
    CONSTRAINT FK_EMP_DEPARTMENT
        FOREIGN KEY (DEPARTMENT_ID)
        REFERENCES DEPARTMENT(DEPARTMENT_ID)
);

CREATE SEQUENCE SQ_DEPARTMENT_PK
START WITH 1
INCREMENT BY 1;

CREATE SEQUENCE SQ_EMPLOYEE_PK
START WITH 1
INCREMENT BY 1;

CREATE OR REPLACE TRIGGER TR_INSERT_DEPARTMENT
BEFORE INSERT ON DEPARTMENT
FOR EACH ROW
BEGIN
    SELECT SQ_DEPARTMENT_PK.NEXTVAL INTO :NEW.DEPARTMENT_ID FROM DUAL;
END;

CREATE OR REPLACE TRIGGER TR_INSERT_EMPLOYEE
BEFORE INSERT ON EMPLOYEE
FOR EACH ROW
BEGIN
    SELECT SQ_EMPLOYEE_PK.NEXTVAL INTO :NEW.EMPLOYEE_ID FROM DUAL;
END;

INSERT INTO EMPLOYEE(EMP_FIRSTNAME, EMP_LASTNAME, DEPARTMENT_ID, SALARY, EMP_EMAIL) VALUES('BOB', 'SMITH', 1, 60000, 'BOBSMITH@GMAIL.COM');
INSERT INTO EMPLOYEE(EMP_FIRSTNAME, EMP_LASTNAME, DEPARTMENT_ID, SALARY, EMP_EMAIL) VALUES('MARY', 'BROWN', 2, 50000, 'MARYBROWN@GMAIL.COM');
INSERT INTO EMPLOYEE(EMP_FIRSTNAME, EMP_LASTNAME, DEPARTMENT_ID, SALARY, EMP_EMAIL) VALUES('JANE', 'DOE', 3, 60000, 'JANEDOE@GMAIL.COM');
INSERT INTO EMPLOYEE(EMP_FIRSTNAME, EMP_LASTNAME, DEPARTMENT_ID, SALARY, EMP_EMAIL) VALUES('CHAD', 'GREEN', 1, 60000,'CHADGREEN@GMAIL.COM');
INSERT INTO EMPLOYEE(EMP_FIRSTNAME, EMP_LASTNAME, DEPARTMENT_ID, SALARY, EMP_EMAIL) VALUES('JESS', 'DAY', 2, 55000, 'JESSDAY@GMAIL.COM');
INSERT INTO EMPLOYEE(EMP_FIRSTNAME, EMP_LASTNAME, DEPARTMENT_ID, SALARY, EMP_EMAIL) VALUES('NICK', 'MILLER', 3, 55000, 'NICKMILLER@GMAIL.COM');

INSERT INTO DEPARTMENT(DEPARTMENT_NAME) VALUES ('MATH');
INSERT INTO DEPARTMENT(DEPARTMENT_NAME) VALUES ('HISTORY');
INSERT INTO DEPARTMENT(DEPARTMENT_NAME) VALUES ('ENGLISH');

CREATE OR REPLACE PROCEDURE SP_GIVE_RAISE(D_ID IN NUMBER)
IS 
ID_VALID INTEGER;
AVG_SAL NUMBER;
BEGIN
    SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
    SELECT COUNT(DEPARTMENT_ID) INTO ID_VALID FROM DEPARTMENT
    WHERE DEPARTMENT_ID = D_ID;
    IF ID_VALID > 0 THEN
        DBMS_OUTPUT.PUT_LINE('DEPARTMENT ID ' || D_ID 
        || ' CORRESPONDS TO A VALID DEPARTMENT');
        UPDATE EMPLOYEE 
        SET SALARY = SALARY * 1.1
        WHERE DEPARTMENT_ID = D_ID;
        SELECT AVG(SALARY) INTO AVG_SAL FROM EMPLOYEE
        WHERE DEPARTMENT_ID = D_ID;
        DBMS_OUTPUT.PUT_LINE('THE AVGERAGE SALARY FOR DEPARTMENT ' 
        || D_ID || ' IS ' || AVG_SAL);
    ELSE 
        DBMS_OUTPUT.PUT.LINE('DEPARTMENT ID ' || D_ID 
        || ' IS NOT VALID');
    END IF;
COMMIT;
EXCEPTION 
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('FAILED TO INCREASE SALARY');
ROLLBACK;
END;
