--CREATE USER TABLE
CREATE TABLE USERS(
    USER_ID INTEGER PRIMARY KEY,
    USERNAME VARCHAR2(20) UNIQUE NOT NULL,
    USER_PASS VARCHAR2(25) NOT NULL,
    FIRST_NAME VARCHAR2(30),
    LAST_NAME VARCHAR2(30),
    IS_ADMIN VARCHAR2(1) --VALUE TO DIFFERENTAITE ADMIN
);

--BANK ACCOUNT TABLE
CREATE TABLE BANK_ACCOUNT(
    ACCOUNT_ID NUMBER PRIMARY KEY,
    BALANCE NUMBER NOT NULL,
    USER_ID NUMBER, --FOREIGN KEY TO USER THAT OWNS ACCOUNT
    FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE
);

--TABLE TO STORE TRANSACTIONS
CREATE TABLE USER_HIST(
    T_ID NUMBER PRIMARY KEY,
    LOG_DATE DATE,  --RECORD TIME OF THE TRANSACTION
    LOG_TYPE VARCHAR2(40), --DESCRIPTION OF TRANSACTION
    USER_ID NUMBER,
    ACCOUNT_ID NUMBER,
    FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE,
    FOREIGN KEY (ACCOUNT_ID) REFERENCES BANK_ACCOUNT(ACCOUNT_ID) ON DELETE CASCADE
);

--CUSTOM CONSTRAINT FOR BALANCE
ALTER TABLE BANK_ACCOUNT
ADD CONSTRAINT CK_BALANCE_POSITIVE CHECK (BALANCE > 0);


--CREATE SEQUENCES FOR PRIMARY KEYS
CREATE SEQUENCE SQ_USERS_PK
START WITH 1
INCREMENT BY 2;

CREATE SEQUENCE SQ_ACCOUNT_PK
START WITH 1
INCREMENT BY 2;

CREATE SEQUENCE SQ_USER_HIST_PK
START WITH 1
INCREMENT BY 2;

--TRIGGERS BEFORE INSERT TO ADD PK
CREATE OR REPLACE TRIGGER TR_INSERT_USER
BEFORE INSERT ON USERS
FOR EACH ROW
BEGIN
    SELECT SQ_USERS_PK.NEXTVAL INTO :NEW.USER_ID FROM DUAL;
END;

CREATE OR REPLACE TRIGGER TR_INSERT_ACCOUNT
BEFORE INSERT ON BANK_ACCOUNT
FOR EACH ROW
BEGIN
    SELECT SQ_ACCOUNT_PK.NEXTVAL INTO :NEW.ACCOUNT_ID FROM DUAL;
END;

CREATE OR REPLACE TRIGGER TR_INSERT_USER_HIST
BEFORE INSERT ON USER_HIST
FOR EACH ROW
BEGIN
    SELECT SQ_USER_HIST_PK.NEXTVAL INTO :NEW.T_ID FROM DUAL;
END;

--STORED PROCEDURE FOR LOGIN
CREATE OR REPLACE PROCEDURE LOGIN
(U_NAME IN VARCHAR2, PW IN VARCHAR2, FOUND OUT NUMBER, U_DATA OUT SYS_REFCURSOR)
IS
BEGIN
    SELECT COUNT(USER_ID) INTO FOUND FROM USERS
    WHERE USERNAME = U_ID AND USER_PASS = PW;
    
    IF FOUND >0 THEN
        
    ELSE
    
    END IF;
    
END;
