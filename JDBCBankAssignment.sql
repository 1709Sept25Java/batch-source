
CREATE TABLE BANKACCOUNT
(BANKACCID NUMBER NOT NULL PRIMARY KEY,
BALANCE NUMBER,
USERID NUMBER NOT NULL,
CONSTRAINT FK_BANKACCOUNT_USERS FOREIGN KEY (USERID) REFERENCES USERS(USERID)
);

CREATE TABLE USERS
(USERID NUMBER NOT NULL PRIMARY KEY,
USERNAME VARCHAR(20),
PASSWORD VARCHAR(20),
USERTYPEID NUMBER NOT NULL,
CONSTRAINT FK_USER_USERTYPE FOREIGN KEY (USERTYPEID) REFERENCES USERTYPE(USERTYPEID)
);

CREATE TABLE USERTYPE
(USERTYPEID NUMBER NOT NULL PRIMARY KEY,
USERTPYE VARCHAR(20)
);

CREATE SEQUENCE SQ_USERID_PK
START WITH 1
INCREMENT BY 1;
CREATE SEQUENCE SQ_BANKID_PK
START WITH 1
INCREMENT BY 1;

CREATE OR REPLACE TRIGGER INSERT_USERS
BEFORE INSERT ON USERS
FOR EACH ROW
BEGIN
  SELECT SQ_USERID_PK.NEXTVAL INTO :NEW.USERID FROM DUAL;
  --SELECT BANK_ID.NEXTVAL INTO :NEW.BANKACCID FROM DUAL;
END;

CREATE OR REPLACE TRIGGER INSERT_BANK
BEFORE INSERT ON BANKACCOUNT
FOR EACH ROW
BEGIN
  SELECT SQ_BANKID_PK.NEXTVAL INTO :NEW.BANKACCID FROM DUAL;
END;


INSERT INTO BANKACCOUNT(BALANCE,USERID) VALUES (4000,1);
INSERT INTO BANKACCOUNT(BALANCE,USERID) VALUES (5000,2);

INSERT INTO USERS (USERNAME, PASSWORD,USERTYPEID) VALUES ('A','B',1);
INSERT INTO USERS (USERNAME, PASSWORD,USERTYPEID) VALUES ('C','D',2);

INSERT INTO USERTYPE(USERTYPEID, USERTPYE) VALUES (1,'ADMIN');
INSERT INTO USERTYPE(USERTYPEID, USERTPYE) VALUES(2,'USERS');




/*store procedure for overdrafting*/
--CREATE OR REPLACE PROCEDURE OVERDRAFT(BANKAID INTEGER, AMOUNT NUMBER) IS
--OLDBAL NUMBER;
--NEWBAL NUMBER;
--OVERDRAWN EXCEPTION;
--BEGIN
--    SELECT BALANCE INTO OLDBAL FROM BANKACCOUNT
--    WHERE BANKACCID = BANKAID;
--    NEWBAL := OLDBAL-AMOUNT;
--    IF NEWBAL < 0 THEN
--    RAISE OVERDRAWN;
--    ELSE
--    UPDATE BANKACCOUNT SET BALANCE = NEWBAL
--    WHERE BANKACCID = BANKAID;
--    DBMS_OUTPUT.PUT_LINE('YOU HAVE SUCCESSFULLY WITHDRAWN '||AMOUNT||'DOLLARS');
--    END IF;
--    EXCEPTION
--    WHEN OVERDRAWN THEN
--    DBMS_OUTPUT.PUT_LINE('YOU DO NOT HAVE ENOUGH MONEY IN YOUR ACCOUNT');
--    ROLLBACK;
--END OVERDRAFT;
--BEGIN
--OVERDRAFT(1,40);
--END;
--SELECT* FROM BANKACCOUNT;


/*stored prcedure for deposit*/
CREATE OR REPLACE PROCEDURE TRANSACTIONS(BANKAID in INTEGER, AMOUNT in NUMBER) IS
OLDBAL NUMBER;
NEWBAL NUMBER;
TRANSACTIONS EXCEPTION;
BEGIN
    SELECT BALANCE INTO OLDBAL FROM BANKACCOUNT
    WHERE BANKACCID = BANKAID;
    NEWBAL := OLDBAL+AMOUNT;
    IF NEWBAL < 0 THEN
    RAISE TRANSACTIONS;
    ELSE
    UPDATE BANKACCOUNT SET BALANCE = NEWBAL
    WHERE BANKACCID = BANKAID;
    DBMS_OUTPUT.PUT_LINE('SUCCESSFUL TRANSACTION OF '||AMOUNT||' DOLLARS');
    END IF;
    EXCEPTION
    WHEN TRANSACTIONS THEN
    DBMS_OUTPUT.PUT_LINE('YOU DO NOT HAVE ENOUGH MONEY TO WITHDRAW');
    ROLLBACK;
END TRANSACTIONS;

BEGIN
TRANSACTIONS(26,-300);
END;
SELECT*FROM bankaccount;

CREATE OR REPLACE PROCEDURE DELETEACC
(BANKACC_ID in BANKACCOUNT.BANKACCID%TYPE
)
AS
BEGIN
DELETE FROM BANKACCOUNT WHERE BANKACCID = BANKACC_ID AND BALANCE =0;
DBMS_OUTPUT.PUT_LINE('DELETED ACCOUNT');
COMMIT;
END;

BEGIN
DELETEACC(22);
END;

CREATE OR REPLACE PROCEDURE ADMINCREATE
(USER_NAME IN VARCHAR,
PASS_WORD IN VARCHAR,
USERTYPE_ID IN NUMBER
)
AS
BEGIN
INSERT INTO USERS (USERNAME, PASSWORD, USERTYPEID) VALUES(USER_NAME,PASS_WORD, USERTYPE_ID);
DBMS_OUTPUT.PUT_LINE('ACCOUNT SUCCESSFULLY CREATED');
COMMIT;
END;
BEGIN
ADMINCREATE('AC','EF',2);
END;

CREATE OR REPLACE PROCEDURE ADMINUPDATE
(USER_ID IN NUMBER,
USER_NAME IN VARCHAR,
PASS_WORD IN VARCHAR,
USERTYPE_ID IN NUMBER
)
AS 
BEGIN
UPDATE USERS SET USERNAME= USER_NAME, PASSWORD=PASS_WORD, USERTYPEID=USERTYPE_ID WHERE USERID=USER_ID;
DBMS_OUTPUT.PUT_LINE('ACCOUNT SUCCESSFULLY UPDATED');
END;
BEGIN
ADMINUPDATE(25,'END','FINISH',1);
END;

CREATE OR REPLACE PROCEDURE ADMINDELETE
(USER_ID IN NUMBER)
AS
BEGIN
DELETE FROM USERS WHERE USERID=USER_ID;
DBMS_OUTPUT.PUT_LINE('ACCOUNT SUCCESSFULLY DELETED');
END;
BEGIN
ADMINDELETE(24);
END;
