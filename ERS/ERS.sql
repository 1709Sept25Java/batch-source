--TABLES
CREATE TABLE USERS(
    U_ID NUMBER NOT NULL,
    U_USERNAME VARCHAR2(40) NOT NULL ,
    U_PASSWORD VARCHAR2(40) NOT NULL,
    U_FIRSTNAME VARCHAR2(30),
    U_LASTNAME VARCHAR2(30),
    U_EMAIL VARCHAR2(100),
    --DECIDED TO DROP USER ROLE TABLE
    U_ROLE VARCHAR2(40) NOT NULL CONSTRAINT UROLE CHECK(U_ROLE IN ('Employee','Manager')), 
    CONSTRAINT PK_USER PRIMARY KEY(U_ID),
    CONSTRAINT UN_USERNAME UNIQUE(U_USERNAME),
    CONSTRAINT UN_EMAIL UNIQUE(U_EMAIL)
);

CREATE TABLE REIMBURSEMENT_STATUS(
    RS_ID NUMBER NOT NULL,
    RS_STATUS VARCHAR2(30) NOT NULL,
    CONSTRAINT PK_R_STATUS PRIMARY KEY(RS_ID)
);

CREATE TABLE REIMBURSEMENT_TYPE(
    RT_ID NUMBER NOT NULL,
    RT_TYPE VARCHAR2(30),
    CONSTRAINT PK_R_TYPE PRIMARY KEY(RT_ID)
);

CREATE TABLE REIMBURSEMENTS(
    R_ID NUMBER NOT NULL,
    R_AMOUNT NUMBER(22,2) NOT NULL,
    R_DESCRIPTION VARCHAR2(100),
    R_RECEIPT BLOB,
    R_SUBMITTED TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    R_RESOLVED TIMESTAMP,
    U_ID_AUTHOR NUMBER NOT NULL,
    U_ID_RESOLVER NUMBER,
    RT_TYPE NUMBER NOT NULL,
    RT_STATUS NUMBER NOT NULL,
    CONSTRAINT PK_REIMBURSEMENTS PRIMARY KEY(R_ID),
    CONSTRAINT FK_AUTHOR FOREIGN KEY (U_ID_AUTHOR) REFERENCES USERS(U_ID),
    CONSTRAINT FK_RESOLVER FOREIGN KEY (U_ID_RESOLVER) REFERENCES USERS(U_ID),
    CONSTRAINT FK_R_STATUS FOREIGN KEY (RT_STATUS) REFERENCES REIMBURSEMENT_STATUS(RS_ID),
    CONSTRAINT FK_R_TYPE FOREIGN KEY (RT_TYPE) REFERENCES REIMBURSEMENT_TYPE(RT_ID)    
);

--SEQUENCES FOR USERS, REIMBURSEMENTS, REIMBUSEMENT_STATUS & REIMBURSEMENT_TYPE
CREATE SEQUENCE SQ_PK_USER
START WITH 3000
INCREMENT BY 3;

CREATE SEQUENCE SQ_PK_REIMBURSEMENTS
START WITH 5000
INCREMENT BY 5;

CREATE SEQUENCE SQ_PK_R_STATUS
START WITH 7000
INCREMENT BY 7;

CREATE SEQUENCE SQ_PK_R_TYPE
START WITH 9000
INCREMENT BY 9;

--TRIGGERS FOR GENERATING PRIMARY KEYS FOR USERS, REIMBURSEMENTS, REIMBUSEMENT_STATUS & REIMBURSEMENT_TYPE
CREATE OR REPLACE TRIGGER TR_INSERT_USERS
BEFORE INSERT ON USERS
FOR EACH ROW
BEGIN
    SELECT SQ_PK_USER.NEXTVAL INTO :NEW.U_ID FROM DUAL;
END;

CREATE OR REPLACE TRIGGER TR_INSERT_REIMBURSEMENTS
BEFORE INSERT ON REIMBURSEMENTS
FOR EACH ROW
BEGIN
    SELECT SQ_PK_REIMBURSEMENTS.NEXTVAL INTO :NEW.R_ID FROM DUAL;
END;

CREATE OR REPLACE TRIGGER TR_INSERT_R_STATUS
BEFORE INSERT ON REIMBURSEMENT_STATUS
FOR EACH ROW
BEGIN
    SELECT SQ_PK_R_STATUS.NEXTVAL INTO :NEW.RS_ID FROM DUAL;
END;

CREATE OR REPLACE TRIGGER TR_INSERT_R_TYPE
BEFORE INSERT ON REIMBURSEMENT_TYPE
FOR EACH ROW
BEGIN
    SELECT SQ_PK_R_TYPE.NEXTVAL INTO :NEW.RT_ID FROM DUAL;
END;

CREATE OR REPLACE PROCEDURE LOGIN(UN IN VARCHAR2, PW IN VARCHAR2, S OUT SYS_REFCURSOR)
IS 
BEGIN
    SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
    OPEN S FOR
        SELECT U_ID, U_ROLE FROM USERS WHERE U_USERNAME = UN AND U_PASSWORD = PW;
    COMMIT;
    EXCEPTION
    WHEN OTHERS THEN ROLLBACK;
END;


BEGIN 
    INSERT INTO USERS(U_USERNAME, U_PASSWORD, U_ROLE)
    VALUES('Minnie', 'Mouse', 'Employee');
END;

BEGIN
    INSERT INTO REIMBURSEMENT_TYPE (RT_TYPE)
    VALUES('Travel');
    INSERT INTO REIMBURSEMENT_TYPE  (RT_TYPE)
    VALUES('Education');
END;


BEGIN
    INSERT INTO REIMBURSEMENT_STATUS (RS_STATUS)
    VALUES('Submitted');
    INSERT INTO REIMBURSEMENT_STATUS  (RS_STATUS)
    VALUES('Pending');
    INSERT INTO REIMBURSEMENT_STATUS  (RS_STATUS)
    VALUES('Complete');
END;


BEGIN 
    INSERT INTO REIMBURSEMENTS (R_AMOUNT, R_SUBMITTED, U_ID_AUTHOR, RT_TYPE, RT_STATUS)
    VALUES (350, DEFAULT, 3000, 9000, 7000);
END;

CREATE OR REPLACE PROCEDURE VIEW_REIMBURSEMENTS(S OUT SYS_REFCURSOR) 
IS
BEGIN
    OPEN S FOR 
        SELECT R_ID, R_AMOUNT, R_SUBMITTED, U_ID_AUTHOR, RT_TYPE, RT_STATUS FROM REIMBURSEMENTS;
END;

        SELECT R_ID, R_AMOUNT, R_SUBMITTED, U_ID_AUTHOR, RT_TYPE, RT_STATUS FROM REIMBURSEMENTS;

