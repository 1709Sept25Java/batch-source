--Janine Lee 10/17/17  PROJECT1

--Creating the tables based on the given ERD
CREATE Table ERS_USERS(
U_ID NUMBER,
U_USERNAME VARCHAR2 (40 BYTE),
U_PASSWORD VARCHAR2 (40 BYTE),
U_FIRSTNAME VARCHAR2 (30 BYTE),
U_LASTNAME VARCHAR2 (30 BYTE),
U_EMAIL VARCHAR2 (100 BYTE),
UR_ID NUMBER
);

CREATE Table ERS_USER_ROLES(
UR_ID NUMBER,
UR_ROLE VARCHAR2(40 BYTE)
);

CREATE Table ERS_REINBURSEMENTS(
R_ID NUMBER,
R_AMOUNT NUMBER,
R_DESCRIPTION VARCHAR2(100 BYTE),
R_RECEIPT BLOB,
R_SUBMITTED TIMESTAMP,
R_RESOLVED TIMESTAMP,
U_ID_AUTHOR NUMBER,
U_ID_RESOLVER NUMBER,
RT_TYPE NUMBER,
RT_STATUS NUMBER
);

CREATE Table ERS_REINBURSEMENT_STATUS(
RS_ID NUMBER,
RS_STATUS VARCHAR2 (30 BYTE)
);

CREATE Table ERS_REINBURSEMENT_TYPE(
RT_ID NUMBER,
RT_TYPE VARCHAR2(30 BYTE)
);


--adding contraints to these tables
--primary keys
ALTER TABLE ERS_USERS ADD PRIMARY KEY(U_ID);
ALTER TABLE ERS_USER_ROLES ADD PRIMARY KEY(UR_ID);
ALTER TABLE ERS_REINBURSEMENTS ADD PRIMARY KEY(R_ID);
ALTER TABLE ERS_REINBURSEMENT_STATUS ADD PRIMARY KEY(RS_ID);
ALTER TABLE ERS_REINBURSEMENT_TYPE ADD PRIMARY KEY(RT_ID);
--foreign keys
/*
ALTER TABLE ERS_USERS DROP CONSTRAINT FK_USER_ROLES_USERS
*/

ALTER TABLE ERS_USERS
ADD CONSTRAINT FK_USER_ROLES_USERS
FOREIGN KEY (UR_ID) REFERENCES ERS_USER_ROLES(UR_ID);

ALTER TABLE ERS_REINBURSEMENTS
ADD CONSTRAINT FK_REINBURSEMENT_USER_AUTHOR
FOREIGN KEY (U_ID_AUTHOR) REFERENCES ERS_USERS(U_ID);

ALTER TABLE ERS_REINBURSEMENTS
ADD CONSTRAINT FK_REINBURSEMENT_USER_RESOLVER
FOREIGN KEY (U_ID_RESOLVER) REFERENCES ERS_USERS(UR_ID);

ALTER TABLE ERS_REINBURSEMENTS
ADD CONSTRAINT FK_REINBURSEMENT_RT_TYPE
FOREIGN KEY (RT_TYPE) REFERENCES ERS_REINBURSEMENT_STATUS(RS_ID);

ALTER TABLE ERS_REINBURSEMENTS
ADD CONSTRAINT FK_REINBURSEMENT_RT_STATUS
FOREIGN KEY (RT_STATUS) REFERENCES ERS_REINBURSEMENT_TYPE(RT_ID);
--composite keys

--triggers
CREATE SEQUENCE U_ID
            START WITH 1
            INCREMENT BY 1;
CREATE SEQUENCE RT_ID
            START WITH 1
            INCREMENT BY 1;
CREATE SEQUENCE RS_ID
            START WITH 1
            INCREMENT BY 1;
CREATE SEQUENCE UR_ID
            START WITH 1
            INCREMENT BY 1;    
CREATE SEQUENCE R_ID
            START WITH 1
            INCREMENT BY 1;   
----triggers after insert
--users
CREATE OR REPLACE TRIGGER ERS1
BEFORE INSERT ON ERS_USERS
    FOR EACH ROW
BEGIN
        SELECT U_ID.nextval INTO: new.U_ID FROM DUAL;
        --.nextval remember, along with new. ... or else bad bind
END;
/
--userroles
CREATE OR REPLACE TRIGGER ERS2
BEFORE INSERT ON ERS_USER_ROLES
    FOR EACH ROW
BEGIN
        SELECT UR_ID.nextval INTO: new.UR_ID FROM DUAL;
        --.nextval remember, along with new. ... or else bad bind
END;
/
--reinbursement status
CREATE OR REPLACE TRIGGER ERS4
BEFORE INSERT ON ERS_REINBURSEMENT_STATUS
    FOR EACH ROW
BEGIN
        SELECT RS_ID.nextval INTO: new.RS_ID FROM DUAL;
        --.nextval remember, along with new. ... or else bad bind
END;
/
--reinbursement type
CREATE OR REPLACE TRIGGER ERS5
BEFORE INSERT ON ERS_REINBURSEMENT_TYPE
    FOR EACH ROW
BEGIN
        SELECT RT_ID.nextval INTO: new.RT_ID FROM DUAL;
        --.nextval remember, along with new. ... or else bad bind
END;
/

--reinbursements
CREATE OR REPLACE TRIGGER ERS6
BEFORE INSERT ON ERS_REINBURSEMENTs
    FOR EACH ROW
BEGIN
        SELECT R_ID.nextval INTO: new.R_ID FROM DUAL;
        --.nextval remember, along with new. ... or else bad bind
END;
/


/**
CREATE OR REPLACE TRIGGER ERS7
BEFORE UPDATE ON ERS_USERS
    FOR EACH ROW
BEGIN
   if :new.U_ID != :old.U_ID
   then
       UPDATE ERS_REINBURSEMENTS a
       set a.R_ID = :new.R_ID
       where a.R_ID = :new.U_ID;
    end if;
END;
/

CREATE OR REPLACE TRIGGER ERS8
BEFORE UPDATE ON ERS_REINBURSEMENTS
    FOR EACH ROW
BEGIN
       UPDATE ERS_REINBURSEMENT_STATUS
       set RS_STATUS ='pending';
END;
/
**/
--insertions for dummy data

--users

INSERT INTO ERS_USERS(U_USERNAME,U_PASSWORD) VALUES('user1','pw');
INSERT INTO ERS_USERS(U_USERNAME,U_PASSWORD) VALUES('Robert','IceCream');
INSERT INTO ERS_USERS(U_USERNAME,U_PASSWORD) VALUES('Sally','Stargazer');
INSERT INTO ERS_USERS(U_USERNAME,U_PASSWORD) VALUES('Chris','Karategirl');
INSERT INTO ERS_USERS(U_USERNAME,U_PASSWORD) VALUES('Emi','AnimeBoys1');
INSERT INTO ERS_USERS(U_USERNAME,U_PASSWORD) VALUES('Al','SillyEvilMan');

--reinbursements

INSERT INTO ERS_REINBURSEMENT_TYPE (RT_TYPE) VALUES ('Type 1');
INSERT INTO ERS_REINBURSEMENT_TYPE (RT_TYPE) VALUES ('Type 1');
INSERT INTO ERS_REINBURSEMENT_TYPE (RT_TYPE) VALUES ('Type 1');
INSERT INTO ERS_REINBURSEMENT_TYPE (RT_TYPE) VALUES ('Type 2');
INSERT INTO ERS_REINBURSEMENT_TYPE (RT_TYPE) VALUES ('Type 3');

INSERT INTO ERS_REINBURSEMENT_STATUS (RS_STATUS) VALUES ('approved');
INSERT INTO ERS_REINBURSEMENT_STATUS (RS_STATUS) VALUES ('pending');
INSERT INTO ERS_REINBURSEMENT_STATUS (RS_STATUS) VALUES ('pending');
INSERT INTO ERS_REINBURSEMENT_STATUS (RS_STATUS) VALUES ('declined');
INSERT INTO ERS_REINBURSEMENT_STATUS (RS_STATUS) VALUES ('approved');

INSERT INTO ERS_REINBURSEMENTS(R_AMOUNT,R_DESCRIPTION,R_SUBMITTED,R_RESOLVED,U_ID_AUTHOR,U_ID_RESOLVER,RT_TYPE,RT_STATUS) 
    VALUES(50,'description1','10-Sep-02 1:10:10.1230','10-Sep-02 12:10:10.1230',1,1,1,1);
INSERT INTO ERS_REINBURSEMENTS(R_AMOUNT,R_DESCRIPTION,R_SUBMITTED,R_RESOLVED,U_ID_AUTHOR,U_ID_RESOLVER,RT_TYPE,RT_STATUS) 
    VALUES(110,'description2','16-Oct-02 1:10:10.1230','10-Nov-02 12:10:10.1230',2,2,2,2);
INSERT INTO ERS_REINBURSEMENTS(R_AMOUNT,R_DESCRIPTION,R_SUBMITTED,R_RESOLVED,U_ID_AUTHOR,U_ID_RESOLVER,RT_TYPE,RT_STATUS) 
    VALUES(50,'description3','22-Dec-02 1:10:10.1230','10-Mar-12 12:10:10.1230',3,3,3,3);    
INSERT INTO ERS_REINBURSEMENTS(R_AMOUNT,R_DESCRIPTION,R_SUBMITTED,R_RESOLVED,U_ID_AUTHOR,U_ID_RESOLVER,RT_TYPE,RT_STATUS) 
    VALUES(1100,'description4','13-Oct-02 1:10:10.1230','11-Nov-02 12:10:10.1230',4,4,4,4);
INSERT INTO ERS_REINBURSEMENTS(R_AMOUNT,R_DESCRIPTION,R_SUBMITTED,R_RESOLVED,U_ID_AUTHOR,U_ID_RESOLVER,RT_TYPE,RT_STATUS) 
    VALUES(500,'description5','21-Dec-02 1:10:10.1230','28-Mar-20 12:10:10.1230',5,5,5,5);    
    --R_RECEIPT is blob

--stored procedures and functions

--get joins to get table connected account information

--get all account info
/*
SELECT ERS_REINBURSEMENTS.R_ID, ERS_REINBURSEMENTS.R_AMOUNT, ERS_REINBURSEMENT_TYPE.RT_TYPE, ERS_REINBURSEMENT_STATUS.RS_STATUS
FROM ((ERS_REINBURSEMENTS
INNER JOIN ERS_REINBURSEMENT_TYPE ON ERS_REINBURSEMENTS.R_ID = ERS_REINBURSEMENT_TYPE.RT_ID)
INNER JOIN ERS_REINBURSEMENT_STATUS ON ERS_REINBURSEMENT_TYPE.RT_ID = ERS_REINBURSEMENT_STATUS.RS_ID);
--test on selecting certain account
SELECT ERS_REINBURSEMENTS.R_ID, ERS_REINBURSEMENTS.R_AMOUNT, ERS_REINBURSEMENT_TYPE.RT_TYPE, ERS_REINBURSEMENT_STATUS.RS_STATUS
FROM ((ERS_REINBURSEMENTS
INNER JOIN ERS_REINBURSEMENT_TYPE ON ERS_REINBURSEMENTS.R_ID = ERS_REINBURSEMENT_TYPE.RT_ID)
INNER JOIN ERS_REINBURSEMENT_STATUS ON ERS_REINBURSEMENT_TYPE.RT_ID = ERS_REINBURSEMENT_STATUS.RS_ID)
Where R_ID=1;
--test select with user
Select * from ERS_USERS WHERE U_USERNAME='user1';
--select acc with user
SELECT ERS_USERS.U_USERNAME, ERS_REINBURSEMENTS.R_ID, ERS_REINBURSEMENTS.R_AMOUNT, ERS_REINBURSEMENT_TYPE.RT_TYPE, ERS_REINBURSEMENT_STATUS.RS_STATUS
FROM (((ERS_REINBURSEMENTS
INNER JOIN ERS_REINBURSEMENT_TYPE ON ERS_REINBURSEMENTS.R_ID = ERS_REINBURSEMENT_TYPE.RT_ID)
INNER JOIN ERS_REINBURSEMENT_STATUS ON ERS_REINBURSEMENT_TYPE.RT_ID = ERS_REINBURSEMENT_STATUS.RS_ID)
Inner JOIN ERS_USERS ON ERS_REINBURSEMENT_TYPE.RT_ID= ERS_USERS.U_ID)
Where ERS_USERS.U_USERNAME='user1';

--get reinbursement and user...change to pending

UPDATE ERS_REINBURSEMENTS 
set R_AMOUNT = 100  
where exists (SELECT * from ERS_USERS 
where ERS_USERS.U_ID = ERS_REINBURSEMENTS.R_ID
and ERS_USERS.U_USERNAME='user1');

UPDATE ERS_REINBURSEMENT_STATUS
set RS_STATUS = 'approved'
where exists (SELECT * from ERS_USERS 
where ERS_USERS.U_ID = ERS_REINBURSEMENT_STATUS.RS_ID
and ERS_USERS.U_USERNAME='user1'); 
*/